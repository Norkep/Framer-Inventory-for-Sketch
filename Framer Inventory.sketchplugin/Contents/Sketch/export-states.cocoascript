@import 'framer-inventory.js'
@import 'framer-inventory-write.js'
@import 'framer-inventory-search.js'


var fileName = "/states.coffie"
var layerHasBeenExported = 0

var exportStates = function(context) {
	
	var doc = context.document
	var selectedLayer = nil
	var selection = context.selection
	var artboards = [[doc currentPage] artboards]
	
	var output = NSMutableArray.new()
	var outputStatesGlobal = NSMutableArray.new()
	var layerName = nil

	if (selection.count() == 0) {
		[doc showMessage:"Failed. Select one or more layers, groups or slices, please."]
	}
	else {
		for (var i = 0; i < selection.count(); i++) {
			selectedLayer = [selection objectAtIndex: i]
			selectedLayerType = [selectedLayer className]
			
			if (selectedLayerType == "MSSliceLayer" || selectedLayerType == "MSLayerGroup" || selectedLayerType == "MSShapeGroup") {
				layerHasBeenExported++
				if (selectedLayerType == "MSSliceLayer" || selectedLayerType == "MSLayerGroup") {
					output = output.arrayByAddingObjectsFromArray(NSArray.arrayWithObjects(createRetinaLayer(selectedLayer), nil))
				}
				else {
					output = output.arrayByAddingObjectsFromArray(NSArray.arrayWithObjects(createRetinaRectangle(selectedLayer), nil))
				}
				
				
				
				var currentState = nil
				var currentStateNumber = 1
				var outputStates = NSMutableArray.new()
				var prevState = ""
				var firstStateName = ""
				
				for (var a = 0; a < artboards.count(); a++) {
					currentArtboard = [artboards objectAtIndex: a]
					// var foundLayerOnCurrentArtboard = findNotSlicesTogetStates_inContainer(removePath(selectedLayer.name()), currentArtboard)
					var foundLayerOnCurrentArtboard = findNotSlicesTogetStates_inContainer(removePath(selectedLayer.name()), currentArtboard, selectedLayerType)

					if (foundLayerOnCurrentArtboard.count() > 0) {
						if (outputStates.count() > 0) {
							var currentState = createRetinaState(foundLayerOnCurrentArtboard[0])
							
							if (currentState != prevState) {
								currentStateNumber++
								outputStates = outputStates.arrayByAddingObjectsFromArray(NSArray.arrayWithObjects("\t" + clearName(currentArtboard.name()) + currentState, nil))
								prevState = currentState
							}
						}
						else {
							var firstState = createRetinaState(foundLayerOnCurrentArtboard[0])
							firstStateName = clearName(currentArtboard.name())
							outputStates = outputStates.arrayByAddingObjectsFromArray(NSArray.arrayWithObjects(createStateTitle(selectedLayer), nil))
							outputStates = outputStates.arrayByAddingObjectsFromArray(NSArray.arrayWithObjects("\t" + clearName(currentArtboard.name()) + firstState, nil))
							prevState = firstState
						}
					}
				}
				outputStates = outputStates.arrayByAddingObjectsFromArray(NSArray.arrayWithObjects(createStateTitleEnd(), nil))
				if (firstStateName != "") {
					outputStates = outputStates.arrayByAddingObjectsFromArray(NSArray.arrayWithObjects(createStateSwitchInstant(selectedLayer, firstStateName), nil))
				}
				
				for (var s = 0; s < outputStates.count(); s++) {
					outputStatesGlobal.addObject([outputStates objectAtIndex: s])
				}
				outputStates = NSMutableArray.new()
			}
		}
		
		
		// output
		var string = NSMutableString.new()
		for (var i = 0; i < output.count(); i++) { string += [output objectAtIndex: i] }
		string += "\r"
		for (var i = 0; i < outputStatesGlobal.count(); i++) { string += [outputStatesGlobal objectAtIndex: i] }
		string += "\r"

		framerInventoryOutput(string, fileName)
		[[NSPasteboard generalPasteboard] clearContents];
		[[NSPasteboard generalPasteboard] setString:string  forType:NSStringPboardType];
		
		var successMessage = "Copied to Clipboard. CMD+V into Framer Studio"
		[doc showMessage:successMessage]
	}

}