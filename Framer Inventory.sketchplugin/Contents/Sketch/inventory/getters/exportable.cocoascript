

// types:
// -1 - unsupported
//  1 - group, image
//  2 - rectangle 
//  3 - oval
//  4 - text layer
//  5 - other shape

function exportableType(layerToAnalyse) {
	var type = [layerToAnalyse className]
	var answer = 0
	
	if (type == "MSSliceLayer") { answer = -1 }
	else if (type == "MSTextLayer") { answer = 4 }
	else if (type == "MSLayerGroup") { 
		log("Group type is detected")
		answer =  1
	}
	else if (type == "MSBitmapLayer") { answer = 1 }
	else if (type == "MSShapeGroup") {
		log("Exportable shape?")
		answer = exportableShape(layerToAnalyse)
	}
	else {
		log("Unrecognised object in exportables")
		asnwer = -1
	}
	
	log("answer: " + answer)
	return answer
}


function exportableShape(layerToAnalyse) {
	if ([layerToAnalyse className] != "MSShapeGroup") { return -1 }
	var magicLayers = layerToAnalyse.layers()
	
	// do not export combined shapes
	if (magicLayers.count() > 1) { return 5 }
	log("Using 1 layer!")
	
	// if shape is made with one layer
	var shape = magicLayers.firstObject()
	
	// if it's a Rectangle or Oval
	if(shape && shape.isKindOfClass(MSOvalShape)) {
		log("It's Oval")
		if ([[[shape path] points] count] != 4) { return 5 }
		return 3
	}
	else if(shape && shape.isKindOfClass(MSRectangleShape)) {
		log("It's Rect")
		if ([[[shape path] points] count] != 4) { return 5 }
		return 2
	}
	else {
		log("STRANGE! NO RECT OR OVAL")
	}
	
	return 5
}





var removePath = function(longPath) {
	return longPath.replace(/^.*[\\\/]/, '').trim()
}

var clearName = function(longName) {
	var clearedName = removePath(longName).trim().split(' ').join('_')
	return clearedName.toLowerCase()
}




// COLORS
//
// var localBlackColor = function() {
// 	return "#000000"
// }
//
// var convertHex = function(hex, opacity) {
//     hex = hex.replace('#','');
//     r = parseInt(hex.substring(0,2), 16);
//     g = parseInt(hex.substring(2,4), 16);
//     b = parseInt(hex.substring(4,6), 16);
//
//     result = 'rgba('+r+','+g+','+b+','+opacity+')';
//     return result;
// }








// relative to Parent/Artboard

function findParentArtboard(layer) {
	var lookingForParentArtboard = true
	var localParent = layer
	while (lookingForParentArtboard) {
		localParent = [localParent parentGroup]
		if ([localParent className] == "MSArtboardGroup") {
			lookingForParentArtboard = false
		}
		else if ([localParent className] == "MSPage") {
			lookingForParentArtboard = false
		}
	}
	return localParent
}

function findParentPage(layer) {
	var parentArtboard = findParentArtboard(layer)
	if ([parentArtboard className] == "MSPage") {
		return parentArtboard
	}
	return [parentArtboard parentGroup]
}