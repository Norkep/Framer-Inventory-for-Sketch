// types:
// -1 - unsupported
// 1  - group, image, shape
// 2  - rectangle
// 3  - oval
// 4  - text layer


// returns width, height, x, y
function getPosition(layer, type, isStillExportable) {
	if (layer == nil) { return nil }

	if (type == nil) { type = TypeInventory.getObjectType(layer) }
	if (isStillExportable == nil) { if (showLog) { log("Warning: isStillExportable is unknown") } }

	if (isStillExportable && (type == 2 || type == 3)) { return getPlace(layer, false) }
	return getPlace(layer, true)
}





var normaliseImage = function(layer) {
	var currentPage = currentDocument.currentPage()

	var layer_copy = [layer duplicate]
	[layer_copy removeFromParent]
	[currentPage addLayers: [layer_copy]]

	var frame = [layer_copy frame]
	[frame setX: [[layer absoluteRect] x]]
	[frame setY: [[layer absoluteRect] y]]

	[layer_copy setRotation: 0]
	if ([[[layer_copy style] contextSettings] opacity] == 0) { [[[layer_copy style] contextSettings] setOpacity:(1.0)] }
	if (![layer_copy isVisible]) { [layer_copy setIsVisible:true] }

	return layer_copy
}


var getAbsolutePlaceImage = function(layer) {
	if (layer == nil) { return [100, 100, 0, 0] }
	var normalisedLayer = normaliseImage(layer)
	var temp = MSSliceTrimming.trimmedRectForLayerAncestry(MSImmutableLayerAncestry.ancestryWithMSLayer(normalisedLayer))
	var values = [temp.size.width, temp.size.height, temp.origin.x, temp.origin.y]

	[normalisedLayer removeFromParent]
	return values
}




var normaliseRect = function(layer) {
	var currentPage = currentDocument.currentPage()

	var layer_copy = [layer duplicate]
	[layer_copy removeFromParent]
	[currentPage addLayers: [layer_copy]]

	var frame = [layer_copy frame]
	[frame setX: [[layer absoluteRect] x]]
	[frame setY: [[layer absoluteRect] y]]

	[layer_copy setRotation: 0]
	if (![layer_copy isVisible]) {
		[layer_copy setIsVisible:true]
		[[[layer_copy style] contextSettings] setOpacity:(1.0)]
	}

	return layer_copy
}

var getAbsolutePlaceRect = function(layer) {
	if (layer == nil) { return nil }
	var normalisedRect = normaliseRect(layer)
	var values = [[[normalisedRect frame] width], [[normalisedRect frame] width], [[normalisedRect absoluteRect] x], [[normalisedRect absoluteRect] y]]

	[normalisedRect removeFromParent]
	return values
}












var getPlace = function(layer, isImage) {
	if (layer == nil) { return [100, 100, 0, 0] }
	if (TypeInventory.isArtboardType(layer)) { return getAbsolutePlaceRect(layer) }

	var currentPage = currentDocument.currentPage()
	var parentValues = nil

	log("Get place")
	
	if (userDefaults.myRelativeGroup == 1 && (currentCommandIdentifier == runGenerateStatesIdentifier || currentCommandIdentifier == runReplicateLayersIdentifier)) {
		log("SHOLD ME REL==1")
		parentValues = getAbsolutePlaceImage([layer parentGroup])
	}
	else { parentValues = getAbsolutePlaceRect(TypeInventory.findParentArtboard(layer)) }


	var layerValues = (isImage) ? getAbsolutePlaceImage(layer) : getAbsolutePlaceRect(layer)
	var resultValues = [layerValues[0], layerValues[1], layerValues[2] - parentValues[2], layerValues[3] - parentValues[3]]

	return resultValues
}







//
// var getPlaceRect = function(layer) {
// 	if (layer == nil) { return [100, 100, 0, 0] }
//
// 	var currentPage = currentDocument.currentPage()
// 	var parentValues = nil
//
// 	if (userDefaults.myRelativeGroup == 1 && (currentCommandIdentifier == runGenerateStatesIdentifier || currentCommandIdentifier == runReplicateLayersIdentifier)) {
// 		parentValues = getAbsolutePlaceImage([layer parentGroup])
// 	}
// 	else { parentValues = getAbsolutePlaceRect(TypeInventory.findParentArtboard(layer)) }
//
// 	var layerValues = getAbsolutePlaceRect(layer)
// 	var resultValues = [layerValues[0], layerValues[1], layerValues[2] - parentValues[2], layerValues[3] - parentValues[3]]
//
// 	return resultValues
// }




// support
//
// var getY = function(layer, parentLayer) {
// 	var parentY = [[parentLayer absoluteRect] y]
// 	var layerY = [[layer absoluteRect] y]
// 	return -(parentY - layerY)
// }
//
// var getX = function(layer, parentLayer) {
// 	var parentX = [[parentLayer absoluteRect] x]
// 	var layerX = [[layer absoluteRect] x]
// 	return -(parentX - layerX)
// }
//
// var getHeight = function(layer) {
// 	return [[layer frame] height]
// }
//
// var getWidth = function(layer) {
// 	return [[layer frame] width]
// }
