function returnLayerName(layerName) {
	return normalizeName(layerName) + " = new Layer"
}


function normalizeName(layerName) {
	return clearName(layerName)
}


var convertHex = function(hex, opacity) {
    hex = hex.replace('#','');
    r = parseInt(hex.substring(0,2), 16);
    g = parseInt(hex.substring(2,4), 16);
    b = parseInt(hex.substring(4,6), 16);

    result = 'rgba('+r+','+g+','+b+','+opacity+')';
    return "\"" + result + "\"";
}


var calc = function(value) {
	return "calc(" + value + "px*\" + " + userRetinaDefaults.myRetina + " + \") "
}


var calcColor = function(value) {
	log("VALUE: " + value)
	var deleteLastScobe = value.replace(/\)\"/, '')
	log(deleteLastScobe)
	return "\" + " + deleteLastScobe + "))\""
}





function generateOpacity(value) {
	if (value == 1) { return "" }
	else return ", opacity: " + value
}


function generateRotation(value) {
	if (value == 0) { return "" }
	else return ", rotation: " + value
}


function generateCorner(value) {
	if (value == 0) { return "" }
	else if (value == "100%") { return ", cornerRadius: " + value }
	else return ", cornerRadius: " + value + "*" + userRetinaDefaults.myRetina
}


function generateShadows(values) {
	return generateFilterShadows(values)
	
	// if (values == nil) { return "" }
// 	else if (values.length == 1) {
// 		var value = values[0]
// 		var composedShadow = ""
// 		if (value[0] != 0) { composedShadow += ", shadowX: " + value[0] + "*" + userRetinaDefaults.myRetina }
// 		if (value[1] != 0) { composedShadow += ", shadowY: " + value[1] + "*" + userRetinaDefaults.myRetina }
// 		if (value[2] != 0) { composedShadow += ", shadowBlur: " + value[2] + "*" + userRetinaDefaults.myRetina }
// 		if (value[3] != 0) { composedShadow += ", shadowSpread: " + value[3] + "*" + userRetinaDefaults.myRetina }
// 		composedShadow += ", shadowColor: "  + convertHex(value[5], value[4])
// 		return composedShadow
// 	}
// 	else return ""
}


function generateFilterShadows(values) {
	if (values == nil) { return "" }
	else if (values.length == 1) {
		var value = values[0]
		var color = convertHex(value[5], value[4])
		
		var shadowVariable = ", style: {\"-webkit-filter\": \"drop-shadow(" + calc(value[0])
		shadowVariable += calc(value[1]) + calc(value[2]) + calcColor(color)
		shadowVariable += "}"
		// var shadowVariable = "style = {\"-webkit-filter\":\"drop-shadow(" + calc(value[0]) + "\""
		// shadowVariable += calc(value[1]) + calc(value[2]) + calc(value[3]) + calcColor(color) + "\"}"
		return shadowVariable
		
		// var composedShadow = ""
// 		if (value[0] != 0) { composedShadow += ", shadowX: " + value[0] + "*" + userRetinaDefaults.myRetina }
// 		if (value[1] != 0) { composedShadow += ", shadowY: " + value[1] + "*" + userRetinaDefaults.myRetina }
// 		if (value[2] != 0) { composedShadow += ", shadowBlur: " + value[2] + "*" + userRetinaDefaults.myRetina }
// 		if (value[3] != 0) { composedShadow += ", shadowSpread: " + value[3] + "*" + userRetinaDefaults.myRetina }
// 		composedShadow += ", shadowColor: "  + convertHex(value[5], value[4])
// 		return composedShadow
	}
	else return ""
}


function generateBorders(values) {
	if (values == nil) { return "" }
	else if (values.length == 1) {
		var value = values[0]
		var composedBorder = ""
		composedBorder += ", borderWidth: " + value[1] + "*" + userRetinaDefaults.myRetina
		composedBorder += ", borderColor: "  + convertHex(value[4], value[3])
		return composedBorder
	}
	else return ""
}


function generateBackgrounds(values) {
	if (values == nil) { return "" }
	else if (values.length == 1) {
		var value = values[0]
		var composedBackground = ", backgroundColor: "  + convertHex(value[2], value[1])
		return composedBackground
	}
	else return ""
}


function generatePosition(values) {
	if (values == nil || values.length < 4) { return "width: 100, height: 100" }
	else {
		var width = " width: " + values[0] + "*" + userRetinaDefaults.myRetina
		var height = ", height: " + values[1] + "*" + userRetinaDefaults.myRetina
		var x = ", x: " + values[2] + "*" + userRetinaDefaults.myRetina
		var y = ", y: " + values[3] + "*" + userRetinaDefaults.myRetina
		return "" + width + height + x + y
	}
}


function generateImagePath(dirtyPath) {
	return ", image: \"images/" + removePath(dirtyPath) + ".png\""
}
















// SO BAD

var isDefault = function(value, index, type, retina) {
	if (type == nil) {
		log("isDefault type is unknown")
		return ""
	}
	
	if (type == 1) {
		return isDefaultForImage(value, index, retina)
	}
	else if (type == 2) {
		return isDefaultForRectangle(value, index, retina)
	}
	else if (type == 3) {
		return isDefaultForRectangle(value, index, retina)
	}
	else if (type == 4) {
		return isDefaultForImage(value, index, retina)
	}
	else {
		log("Type is numeric but unknown")
		return ""
	}
	
}






var isDefaultForAll = function(value, index, retina) {
	
	if (index == 0) { return " width: " + value + "*" + retina}
	else if (index == 1) { return ", height: " + value + "*" + retina}
	else if (index == 2) { return ", x: " + value + "*" + retina}
	else if (index == 3) { return ", y: " + value + "*" + retina}
	else if (index == 4 && value != 1.0) { return ", opacity: " + value}
	else if (index == 5 && value != 0) { return ", rotation: " + value}
	return ""
}

var isDefaultForRectangle = function(value, index, retina) {
	if (index >= 0 && index < 6) {
		return isDefaultForAll(value, index, retina)
	}
	
	else if (index == 6 && value != 0) { return ", shadowX: " + value + "*" + retina}
	else if (index == 7 && value != 0) { return ", shadowY: " + value + "*" + retina}
	else if (index == 8 && value != 0) { return ", shadowBlur: " + value + "*" + retina}
	else if (index == 9 && value != 0) { return ", shadowSpread: " + value + "*" + retina}
	else if (index == 10 && value != convertHex(localBlackColor(), 0)) { return ", shadowColor: " + colorValue(value)}
	else if (index == 11 && value != 0) { return ", borderWidth: " + value + "*" + retina}
	else if (index == 12 && value != convertHex(localBlackColor(), 0)) { return ", borderColor: " + colorValue(value)}
	else if (index == 13 && value != 0) { return ", cornerRadius: " + value + "*" + retina}
	else if (index == 14 && value != convertHex(localBlackColor(), 0)) { return ", backgroundColor: " + colorValue(value)}
	
	return ""
}


var isDefaultForImage = function(value, index, retina) {
	if (index >= 0 && index < 6) {
		return isDefaultForAll(value, index, retina)
	}
	else if (index == 6) { return ", image: \"images/" + value + ".png\""}
	
	return ""
}




var colorValue = function(value) {
	return "\"" + value + "\""
}
