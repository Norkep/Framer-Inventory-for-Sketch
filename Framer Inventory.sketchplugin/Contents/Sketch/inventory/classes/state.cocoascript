@import 'inventory/getters/exportable.cocoascript'

@import 'inventory/getters/get-place.cocoascript'
@import 'inventory/getters/get-opacity.cocoascript'
@import 'inventory/getters/get-corners.cocoascript'
@import 'inventory/getters/get-shadows.cocoascript'
@import 'inventory/getters/get-borders.cocoascript'
@import 'inventory/getters/get-background-color.cocoascript'

@import 'inventory/strings/generate.cocoascript'




function State (layer) {
	
	var parentArtboard = findParentArtboard(layer)
	this.stateName = [parentArtboard name]
	
	this.layer = layer
	this.type = exportableType(layer)
	
	this.position = []
	this.position = getPosition(layer, this.type)

	this.opacity = getOpacity(layer)
	this.corner = getCornerRadius(layer)
	this.rotation = 0
	if ([layer rotation] != 0) { this.rotation = (-[layer rotation]) }

	this.shadows = getShadows(layer)
	this.inners = getInners(layer)
	this.borders = getBorders(layer)

	this.backgrounds = getBackgroundColors(layer)
	
	
	// active properties
	this.cornerActive = (this.corner == nil || this.corner == 0) ? false : true
	this.rotationActive = (this.rotation == 0) ? false : true
	
	this.shadowsActive = (this.shadows == nil || this.shadows == '') ? false : true
	this.innersActive = (this.inners == nil || this.inners == '') ? false : true
	this.bordersActive = (this.borders == nil || this.borders == '') ? false : true
	this.backgroundsActive = (this.backgrounds == nil || this.backgrounds == '') ? false : true
	
	
	// exportable conditions
	this.shadowsExportable = this.isShadowsExportale()
	this.innersExportable = this.isInnersExportale()
	this.bordersExportable = this.isBordersExportale()
	this.backgroundsExportable = this.isBackgroundsExportale()
	this.generatable = this.isGeneratable()
	
}




State.prototype.isEqualToState = function(state) {
	if (state == nil) { return false }
	
	if (this.type != state.type) { return false }
	if (this.opacity != state.opacity) { return false }
	if (this.corner != state.corner) { return false }
	if (this.rotation != state.rotation) { return false }
	
	if (!compareArrays(this.position, state.position)) { return false }
	if (!compareMatrices(this.shadows, state.shadows)) { return false }
	if (!compareMatrices(this.inners, state.inners)) { return false }
	if (!compareMatrices(this.borders, state.borders)) { return false }
	if (!compareMatrices(this.backgrounds, state.backgrounds)) { return false }
	
	return true
}






State.prototype.isGeneratable = function() {
	if (this.shadowsExportable && this.innersExportable && this.bordersExportable && this.backgroundsExportable) { return true }
	else return false
}


State.prototype.isShadowsExportale = function() {
	if (this.shadows == nil || this.shadows == '' || this.shadows.length == 1) { return true }
	else return false
}


State.prototype.isInnersExportale = function() {
	if (this.inners == nil || this.inners == '') { return true }
	else return false
}


State.prototype.isBordersExportale = function() {
	if (this.borders == nil || this.borders == '') { return true }
	else if (this.borders.length == 1) {
		if (this.borders[0][0] == 1) {
			if (this.borders[0][2] == 0) { return true }
			else return false
		}
		else return false
	}
	else return false
}


State.prototype.isBackgroundsExportale = function() {
	if (this.backgrounds == nil || this.backgrounds == '') { return true }
	else if (this.backgrounds.length == 1) {
		if (this.backgrounds[0][0] == 0) {
			return true
		}
		else return false
	}
	else return false
}








// a little helper
State.prototype.printState = function() {
	log("NAME: " + this.stateName)
	
	log("Position " + this.position)
	log("Opacity: " + this.opacity)
	log("Corner: " + this.corner)
	log("Rotation: " + this.rotation)
	
	log("Shadows: S=" + this.shadows.length + "| " + this.shadows)
	log("Inners: I=" + this.inners.length + "| " + this.inners)
	log("Borders: Bo=" + this.borders.length + "| " + this.borders)
	log("Backgrounds: Ba=" + this.backgrounds.length + "| " + this.backgrounds)
}