@import 'inventory/getters/exportable.cocoascript'

@import 'inventory/getters/get-place.cocoascript'
@import 'inventory/getters/get-opacity.cocoascript'
@import 'inventory/getters/get-corners.cocoascript'
@import 'inventory/getters/get-shadows.cocoascript'
@import 'inventory/getters/get-borders.cocoascript'
@import 'inventory/getters/get-background-color.cocoascript'

@import 'inventory/strings/generate.cocoascript'

@import 'inventory/libs/clone.js'




function State (layer) {
	
	var parentArtboard = findParentArtboard(layer)
	this.stateName = [parentArtboard name]
	
	this.layer = layer
	this.type = exportableType(layer)
	
	
	// active properties
	this.position = []

	this.opacity = getOpacity(layer)
	this.corner = getCornerRadius(layer)
	this.rotation = 0
	if ([layer rotation] != 0) { this.rotation = (-[layer rotation]) }

	this.shadows = getShadows(layer)
	this.inners = getInners(layer)
	this.borders = getBorders(layer)

	this.backgrounds = getBackgroundColors(layer)
	
	
	
	// active conditions
	this.opacityActive = (this.opacity == 1) ? false : true
	this.cornerActive = (this.corner == nil || this.corner == 0) ? false : true
	this.rotationActive = (this.rotation == 0) ? false : true
	
	this.shadowsActive = (this.shadows == nil || this.shadows == '') ? false : true
	this.innersActive = (this.inners == nil || this.inners == '') ? false : true
	this.bordersActive = (this.borders == nil || this.borders == '') ? false : true
	this.backgroundsActive = (this.backgrounds == nil || this.backgrounds == '') ? false : true
	
	
	// exportable conditions
	this.shadowsExportable = this.isShadowsExportale()
	this.innersExportable = this.isInnersExportale()
	this.bordersExportable = this.isBordersExportale()
	this.backgroundsExportable = this.isBackgroundsExportale()
	this.generatable = this.isGeneratable()
	
	this.position = getPosition(layer, this.type, this.generatable)
	
}


State.prototype.fixFirstState = function(firstArtboardName) {
	this.stateName = firstArtboardName
	this.opacity = 0
	this.opacityActive = (this.opacity == 1) ? false : true
}








State.prototype.isEqualToState = function(state) {
	if (state == nil) { return false }
	
	if (this.type != state.type) { return false }
	if (this.opacity != state.opacity) { return false }
	if (this.corner != state.corner) { return false }
	if (this.rotation != state.rotation) { return false }
	
	log("CLASSOPP")
	if (!compareArrays(this.position, state.position)) { return false }
	if (!compareMatrices(this.shadows, state.shadows)) { return false }
	if (!compareMatrices(this.inners, state.inners)) { return false }
	if (!compareMatrices(this.borders, state.borders)) { return false }
	if (!compareMatrices(this.backgrounds, state.backgrounds)) { return false }
	
	return true
}






State.prototype.isGeneratable = function() {
	if (this.shadowsExportable && this.innersExportable && this.bordersExportable && this.backgroundsExportable) { return true }
	else return false
}


State.prototype.isShadowsExportale = function() {
	if (this.shadows == nil || this.shadows == '' || this.shadows.length == 1) { return true }
	else return false
}


State.prototype.isInnersExportale = function() {
	if (this.inners == nil || this.inners == '') { return true }
	else return false
}


State.prototype.isBordersExportale = function() {
	if (this.borders == nil || this.borders == '') { return true }
	else if (this.borders.length == 1) {
		if (this.borders[0][0] == 1) {
			if (this.borders[0][2] == 0) { return true }
			else return false
		}
		else return false
	}
	else return false
}


State.prototype.isBackgroundsExportale = function() {
	if (this.backgrounds == nil || this.backgrounds == '') { return true }
	else if (this.backgrounds.length == 1) {
		if (this.backgrounds[0][0] == 0) {
			return true
		}
		else return false
	}
	else return false
}







State.prototype.keepDifference = function(compareState) {
	var state = State.cloneState(compareState)
	
	if (this.opacity == state.opacity) { 
		state.opacity = nil
		state.opacityActive = false
	}
	if (this.corner == state.corner) {
		state.corner = nil
		state.cornerActive = false
	}
	if (this.rotation == state.rotation) {
		state.rotation = nil
		state.rotationActive = false
	}
	
	if (this.position != nil && this.position != "" && state.position != nil) {
		if (this.position[0] == state.position[0]) { state.position[0] = nil }
		if (this.position[1] == state.position[1]) { state.position[1] = nil }
		if (this.position[2] == state.position[2]) { state.position[2] = nil }
		if (this.position[3] == state.position[3]) { state.position[3] = nil }
	}
	
	if (compareMatrices(this.shadows, state.shadows)) {
		state.shadows = nil
		state.shadowsActive = false
	}
	if (compareMatrices(this.inners, state.inners)) {
		state.inners = nil
		state.innersActive = false
	}
	if (compareMatrices(this.borders, state.borders)) {
		state.borders = nil
		state.bordersActive = false
	}
	if (compareMatrices(this.backgrounds, state.backgrounds)) {
		state.backgrounds = nil
		state.backgroundsActive = false
	}
	
	return state
}


State.cloneState = function(baseState) {
	var layer = baseState.layer
	var state = new State(layer)
	return state
}




// a little helper
State.prototype.printState = function() {
	log("NAME: " + this.stateName)
	
	log("Position " + this.position)
	log("Opacity: " + this.opacity)
	log("Corner: " + this.corner)
	log("Rotation: " + this.rotation)
	
	if (this.shadows != nil) { log("Shadows: S=" + this.shadows.length + "| " + this.shadows) }
	if (this.inners != nil) { log("Inners: I=" + this.inners.length + "| " + this.inners) }
	if (this.borders != nil) { log("Borders: Bo=" + this.borders.length + "| " + this.borders) }
	if (this.backgrounds != nil) { log("Backgrounds: Ba=" + this.backgrounds.length + "| " + this.backgrounds) }
}