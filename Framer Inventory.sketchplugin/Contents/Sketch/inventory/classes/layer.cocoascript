@import 'inventory/classes/state.cocoascript'

@import 'inventory/getters/normalize.cocoascript'
@import 'inventory/getters/get-place.cocoascript'
@import 'inventory/strings/generate.cocoascript'


function Layer (layerName, currentPage) {
	// name of layer
	this.layerName = layerName;
	this.states = [];

}



Layer.prototype.getName = function() {
    return this.layerName;
}

var ln = function() { return "\n" }
var dln = function() { return ln() + ln() }




Layer.prototype.addState = function(layer) {
	var state = new State(layer)
	this.states.push(state)
}





// PRINT

Layer.prototype.printLayer = function() {
	if (this.states.length == 1) {
		return this.generateFramerLayer()
	}
	
	for (var i = 0; i < this.states.length; i++) {
		this.states[i].printState()
	}
	return "temporary nil"
}


Layer.prototype.generateFramerLayer = function() {
	var outputString = ""
	var outputPosition = returnLayerName(this.layerName)
	
	var currentState = this.states[0]
	
	// useful for both shapes and images
	outputString += generateOpacity(currentState.opacity)
	// outputString += generateRotation(currentState.rotation)
	
	
	if (currentState.isShadowsExportale()) { outputString += generateShadows(currentState.shadows) }
	if (currentState.isBordersExportale()) { outputString += generateBorders(currentState.borders) }
	
	if (currentState.isGeneratable()) {
		outputString += generateCorner(currentState.corner)
		outputString += generateBackgrounds(currentState.backgrounds)
		outputString += generateRotation(currentState.rotation)
		
		outputPosition += generatePosition(currentState.position)
	}
	else {
		var normalizedLayer = this.normalizeCopyForState(currentState)
		
		var temp = getPosition(normalizedLayer)
		log("!!!!!!!!!!!!!!!!!!!!!" + temp)
		outputPosition += generatePosition(temp)
		outputPosition += generateImagePath(this.layerName)
	}
	
	
	log("" + outputPosition + outputString)
	
	return "" + outputPosition + outputString + dln()
}


Layer.prototype.normalizeCopyForState = function(state) {
	var baseLayer = state.layer
	var copiedLayer = [baseLayer duplicate]
	[copiedLayer removeFromParent]

	var newPage = addPage(getCurrentPage())
	[newPage addLayers: [copiedLayer]]
	if (state.isShadowsExportale()) { cleanShadows(copiedLayer) }
	if (state.isBordersExportale()) { cleanBorders(copiedLayer) }
	return copiedLayer

}