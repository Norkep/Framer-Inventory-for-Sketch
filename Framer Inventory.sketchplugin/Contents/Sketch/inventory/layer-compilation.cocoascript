@import 'inventory/getters/exportable.cocoascript'

@import 'inventory/getters/get-place.cocoascript'
@import 'inventory/getters/get-opacity.cocoascript'
@import 'inventory/getters/get-shadows.cocoascript'
@import 'inventory/getters/get-borders.cocoascript'
@import 'inventory/getters/get-corners.cocoascript'
@import 'inventory/getters/get-background-color.cocoascript'

@import 'inventory/strings/framer.cocoascript'
@import 'inventory/strings/paths.cocoascript'


function LayerCompilation (layer, retina) {
	// name of layer
	this.name = [layer name];
	
	// 0 - relative to Artboard, 1 - relative to Parent
	this.axisMode = 0
	this.retina = 1
	if (retina != nil) {
		this.retina = retina
	}
	
	// types:
	// -1 - unsupported
	// 1  - group, image, shape
	// 2  - rectangle 
	// 3  - oval
	// 4  - text layer
	this.type = exportableType(layer)
	log("init type: " + this.type)

	this.matrix = []
}



LayerCompilation.prototype.getName = function() {
    return this.name;
}

var ln = function() { return "\n" }
var dln = function() { return ln() + ln() }









// ADD STATE

LayerCompilation.prototype.addState = function(layer) {
	if (this.type == 1) {
		this.addStateImage(layer)
	}
	else if (this.type == 2) {
		this.addStateRectangle(layer)
	}
	else if (this.type == 3) {
		this.addStateRectangle(layer)
	}
	else if (this.type == 4) {
		this.addStateImage(layer)
	}
	else {
		log("Unknown type! " + this.type)
	}
}





LayerCompilation.prototype.addStateImage = function(layer) {
	// 0 - 4
	var positionVariables = getPosition(layer)
	// 5
	var opacityVariable = getOpacity(layer)
	// 6
	var rotationVariable = 0
	if ([layer rotation] != 0) {
		rotationVariable = (-[layer rotation])
	}

	var params = positionVariables.concat(opacityVariable)
	params = params.concat(rotationVariable)

	this.matrix.push(params)
}


LayerCompilation.prototype.addStateRectangle = function(layer) {
	// 0 - 4
	var positionVariables = getPosition(layer)
	// 5
	var opacityVariable = getOpacity(layer)
	// 6
	var rotationVariable = 0
	if ([layer rotation] != 0) {
		rotationVariable = (-[layer rotation])
	}
	// 7 - 10
	var shadowVariables = getShadows(layer)

	// 11 - 12
	var bordersVariables = getBorders(layer)
	// 13
	var cornersVariable = getCorners(layer)
	// 14
	var backgroundColorVariable = getBackgroundColor(layer)



	var params = positionVariables.concat(opacityVariable)
	params = params.concat(rotationVariable)
	params = params.concat(shadowVariables)
	
	params = params.concat(bordersVariables)
	params = params.concat(cornersVariable)
	params = params.concat(backgroundColorVariable)

	this.matrix.push(params)
}









// PRINT

LayerCompilation.prototype.printCompilation = function() {
	if (this.matrix.length == 0) {
		log("Matrix is empty for |" + this.name + "|")
	}
	else if (this.matrix.length == 1) {
		log("printed layer| " + this.printLayer())
		return this.printLayer()
	}
	else {
		log("states? " + this.matrix.length)
	}
}


LayerCompilation.prototype.printLayer = function() {
	if (this.type == 0) {
		log("No layer to printLayer")
	}
	else if (this.type == 1) {
		return this.printLayerForImage()
	}
	else if (this.type == 2) {
		return this.printLayerForRectangle()
	}
	else if (this.type == 3) {
		return this.printLayerForOval()
	}
	else if (this.type == 4) {
		return this.printLayerForText()
	}
	else {
		log("Unknown type to printLayer")
	}
}










LayerCompilation.prototype.printLayerForImage = function() {
	var composedOutput = ""
	composedOutput += returnLayerName(this.name)
	log("going to print imaged layer")
	
	for (var i = 0; i < this.matrix[0].length; i++) {
		var value = this.matrix[0][i]
		composedOutput += isDefault(value, i, this.type, this.retina)
		if (i == 3) {
			var imagePathValue = removePath(this.name)
			log("imimagePathValue is " + imagePathValue)
			composedOutput += isDefault(imagePathValue, 6, this.type, this.retina)
		}
	}
	
	return composedOutput
}



LayerCompilation.prototype.printLayerForText = function() {
	var composedOutput = ""
	composedOutput += returnLayerName(this.name)
	log("........going to print text layer")
	
	for (var i = 0; i < this.matrix[0].length; i++) {
		var value = this.matrix[0][i]
		composedOutput += isDefault(value, i, this.type, this.retina)
		if (i == 3) {
			var imagePathValue = removePath(this.name)
			log("imimagePathValue is " + imagePathValue)
			composedOutput += isDefault(imagePathValue, 6, this.type, this.retina)
		}
	}
	
	return composedOutput
}


LayerCompilation.prototype.printLayerForRectangle = function() {
	var composedOutput = ""
	composedOutput += returnLayerName(this.name)
	
	for (var i = 0; i < this.matrix[0].length; i++) {
		var value = this.matrix[0][i]
		composedOutput += isDefault(value, i, this.type, this.retina)
	}
	
	return composedOutput
}


LayerCompilation.prototype.printLayerForOval = function() {
	var composedOutput = ""
	composedOutput += returnLayerName(this.name)
	
	for (var i = 0; i < this.matrix[0].length; i++) {
		var value = this.matrix[0][i]
		if (i == 13) {
			composedOutput += ", cornerRadius: \"100%\""
			continue
		}
		composedOutput += isDefault(value, i, this.type, this.retina)
	}
	composedOutput += dln()
	
	return composedOutput
}