@import 'export-keynote.cocoascript'
@import 'framer-inventory-search.js'
@import 'framer-inventory-text.js'


var pluginPath = ""

var pluginCommandNameText = "Simulate Keynote"
var supportMessage = "Generate FramerJS code to simulate Keynote"
var infoMessage = "Determines exportable layers and slices.\rGenerates clickable linear prototype\rbased on your artboards.\r\r"
var tipText = "Don't forget to export assets manually!"

var onRun = function(context) {
    pluginPath = context.scriptPath.substring(0, context.scriptPath.lastIndexOf("/"));
	var doc = context.document
	var selection = context.selection
	createKeynoteExportWindow(context)
}


function createKeynoteExportWindow(context){
	var readyLayerNames = readyToExportAmount(context)
	
	var paddingLeft = 288;
	var columnWidth = 136;
	var smallFontSize = 9;
	
	var tpd = 6
	
	var lightColor = [NSColor colorWithRed:0.6 green:0.6 blue:0.6 alpha:1];
	var semiWhiteColor = [NSColor colorWithRed:0.93 green:0.93 blue:0.93 alpha:1];
	var greenColor = [NSColor colorWithRed:0.38 green:0.61 blue:0.41 alpha:1];
	var redColor = [NSColor colorWithRed:0.8 green:0.32 blue:0.28 alpha:1];
		
	var exportWindow = [[NSWindow alloc] init];
	[exportWindow setFrame:NSMakeRect(0, 0, 600, 304) display:false];
	[exportWindow setBackgroundColor:[NSColor whiteColor]];
	
	
	var imagePath = pluginPath + '/images/' + 'simulate' + isRetinaRequired() + '.png';
	var image = NSImage.alloc().initByReferencingFile(imagePath);
	var imageView = [[NSImageView alloc] initWithFrame:NSMakeRect(30, 0, 220, 260)];
	[imageView setImage: image];
	[[exportWindow contentView] addSubview:imageView];
	
	var commandText = [[NSTextField alloc] initWithFrame:NSMakeRect(paddingLeft-1, 235-tpd, columnWidth, 16)];
	[commandText setEditable:false];
	[commandText setBordered:false];
	[commandText setDrawsBackground:false];
	[commandText setFont:[NSFont boldSystemFontOfSize:15]];
	[commandText setStringValue:pluginCommandNameText];
	[[exportWindow contentView] addSubview:commandText];
	
	var commandSupportText = [[NSTextField alloc] initWithFrame:NSMakeRect(paddingLeft-1, 235-19-tpd, columnWidth*2, 16)];
	[commandSupportText setEditable:false];
	[commandSupportText setBordered:false];
	[commandSupportText setDrawsBackground:false];
	[commandSupportText setFont:[NSFont systemFontOfSize:11]];
	[commandSupportText setStringValue:supportMessage];
	[[exportWindow contentView] addSubview:commandSupportText];
	
	
	//All sizes will be multiply with this const. Type const name or a number instead!
    var description = [[NSTextField alloc] initWithFrame:NSMakeRect(paddingLeft-1, 186-50+4-tpd, columnWidth, 42)];
    [description setEditable:false];
    [description setBordered:false];
    [description setFont:[NSFont boldSystemFontOfSize:11]];
    [description setTextColor:lightColor];
    [description setDrawsBackground:false];
    [description setStringValue:infoMessage];
    [description sizeToFit];
    [[exportWindow contentView] addSubview:description];
	
	
	var readyColor = redColor
	var readyMessage = inventoryNoExportablesForKeynote
	if (readyLayerNames != nil && readyLayerNames.length > 0) {
	    readyColor = greenColor
		readyMessage = "Ready to export " + readyLayerNames.length + " FramerJS\rlayers and all their states"
		if (readyLayerNames.length == 1) {
			readyMessage = "Ready to export " + readyLayerNames.length + " FramerJS\rlayer and its states"
		}
	}

    var foundLayers = [[NSTextField alloc] initWithFrame:NSMakeRect(paddingLeft-1, 80, columnWidth, 42)];
    [foundLayers setEditable:false];
    [foundLayers setBordered:false];
    [foundLayers setFont:[NSFont boldSystemFontOfSize:11]];
    [foundLayers setTextColor:readyColor];
    [foundLayers setDrawsBackground:false];
    [foundLayers setStringValue:readyMessage];
    [foundLayers sizeToFit];
    [[exportWindow contentView] addSubview:foundLayers];
	
	

	
	
	var buttonsBottomOffset = 40;
    
	var exportButton = [[NSButton alloc] initWithFrame:NSMakeRect(paddingLeft-4, buttonsBottomOffset-20, 78, 50)];
	[exportButton setTitle:"Export"];
	[exportButton setBezelStyle:NSRoundedBezelStyle];
	[exportButton setKeyEquivalent:"\r"];
	[exportButton setCOSJSTargetFunction:function(sender) {
		[exportWindow orderOut:nil]
		[NSApp stopModal]
		exportKeynote(context)
	}];
	[exportButton setAction:"callAction:"];
	[[exportWindow contentView] addSubview:exportButton];
    
    
	var cancelButton = [[NSButton alloc] initWithFrame:NSMakeRect(paddingLeft + 78-4, buttonsBottomOffset-20, 68, 50)];
	[cancelButton setTitle:"Cancel"];
	[cancelButton setBezelStyle:NSRoundedBezelStyle];
	// [exportButton setKeyEquivalent:"\033"];
	[cancelButton setCOSJSTargetFunction:function(sender) {
		[exportWindow orderOut:nil]
		[NSApp stopModal]
	}];
	[cancelButton setAction:"callAction:"]
	[[exportWindow contentView] addSubview:cancelButton];
    
    
    var helpButton = [[NSButton alloc] initWithFrame:NSMakeRect(556-30+6, 30, 32, 32)];
	[helpButton setBezelStyle:NSHelpButtonBezelStyle];
	[helpButton setTitle:nil];
	   [helpButton setCOSJSTargetFunction:function(sender) {
	       var url = [NSURL URLWithString:@"http://medium.com"];
		   [[NSWorkspace sharedWorkspace] openURL:url]
	   }];
	   [helpButton setAction:"callAction:"]
	[[exportWindow contentView] addSubview:helpButton];
    
    
	[exportWindow setDefaultButtonCell:[exportButton cell]];
	[NSApp runModalForWindow:exportWindow];
	
}

function isRetinaRequired() {
   return NSScreen.isOnRetinaScreen() ? "2x" : "";
}

