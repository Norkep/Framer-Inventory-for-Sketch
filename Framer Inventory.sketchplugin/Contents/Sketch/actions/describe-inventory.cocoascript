
function DescribeInventory () {}



// states related

DescribeInventory.generateStateSection = function(layerName, generatedStates) {
	if (generatedStates == nil || generatedStates.length == 0) { return "" }

	var stateSectionName = GenerateInventory.clearName(layerName) + ".states =" + ln()
	var stateBottomSection = ln()

	var states = ""
	for (var i = 0; i < generatedStates.length; i++) {
		var correctBeginString = generatedStates[i].replace(" {, ", "")
		correctBeginString = correctBeginString.replace(" {", "")
		correctBeginString = correctBeginString.replace("}", "")

		if (userDefaults.myDetailedNotation == 1)	{
			correctBeginString = correctBeginString.replace(/\t/g, tln() + tln())
		}
		else {
			correctBeginString = correctBeginString.replace(/:/g, ": ")
			correctBeginString = correctBeginString.replace(": ", ": { ")
			correctBeginString = correctBeginString.replace(/:  /g, ": ")
			correctBeginString += " }"
		}

		states += tln() + correctBeginString + ln()
	}

	return stateSectionName + states + stateBottomSection
}

DescribeInventory.generateState = function(stateName, stateContent) {
	if (stateContent == "" || stateContent == nil || stateContent == '') { return "" }
	return "\"" + GenerateInventory.clearName(stateName) + "\"" + ": {" + stateContent + "}"
}


DescribeInventory.generateStateSwitchInstant = function(layerName, stateName) {
	return "" + GenerateInventory.clearName(layerName) + ".stateSwitch(\"" + GenerateInventory.clearName(stateName) + "\")" + dln()
}

DescribeInventory.generateRetinaVariable = function() {
	if (userDefaults.myRetinaEnabled == 0) { return "" }
	if (scaleInstance == nil) { scaleInstance = new ScaleInventory() }
	return userDefaults.myRetinaString + " = " + scaleInstance.returnScaleCode() + ln()
}

DescribeInventory.generatePhoneModel = function() {
	var model = userDefaults.myDevice
	var modelDescription = ""

	if (model == 2) {
		modelDescription += "Framer.Device.deviceType = \"apple-iphone-5s-space-gray\"" + ln()
	}
	else if (model == 3) {
		modelDescription += "Framer.Device.deviceType = \"apple-iphone-6s-space-gray\"" + ln()
	}
	else if (model == 4) {
		modelDescription += "Framer.Device.deviceType = \"apple-iphone-6s-plus-space-gray\"" + ln()
	}
	else if (model == 5) {
		modelDescription += "Framer.Device.deviceType = \"google-nexus-5x\"" + ln()
	}
	else if (model == 6) {
		modelDescription += "Framer.Device.deviceType = \"google-nexus-6p\"" + ln()
	}
	return modelDescription
}



function getButtonName() {
	return "cycleButton"
}

DescribeInventory.generateCycleButton = function() {
	return getButtonName() + " = new Layer width: Screen.width, height: Screen.height, backgroundColor: \"transparent\"" + dln()
}



function getCycleArrayName() {
	return "statesFromArtboards"
}

DescribeInventory.generateCycleStates = function(states) {
	var cycleStatesDescription = getCycleArrayName() + " = ["
	for (var i = 0; i < states.length; i++) {
		cycleStatesDescription += "\"" + GenerateInventory.clearName(states[i]) + "\""
		if (i != states.length - 1) { cycleStatesDescription += ", "}
	}
	cycleStatesDescription += "]" + ln()
	return cycleStatesDescription
}



function getLayersArrayName() {
	return "items"
}

DescribeInventory.generateLayers = function(layers) {
	var layersDescription = getLayersArrayName() + " = ["
	for (var i = 0; i < layers.count(); i++) {
		var layerName = [[layers objectAtIndex: i] name]
		layersDescription += GenerateInventory.clearName(layerName)
		if (i != layers.count() - 1) { layersDescription += ", "}
	}
	layersDescription += "]" + ln()
	return layersDescription

}



function getCyclerName() {
	return "cycler"
}

DescribeInventory.generateCycler = function() {
	var cyclerDescription = getCyclerName() + " = Utils.cycle(" + getCycleArrayName() + ")" + ln()
	cyclerDescription += "nextState = " + getCyclerName() + "()" + dln()
	return cyclerDescription
}

function getFunctionName() {
	return "runSimulation"
}


DescribeInventory.generateHandler = function() {
	var handlerDescription = ""

	if (userDefaults.myAutoplay == 0) {
		handlerDescription = getButtonName() + ".on Events.Click, ->" + ln()
		handlerDescription += tln() + "nextState = " + getCyclerName() + "()" + ln()
		handlerDescription += tln() + "for item in " + getLayersArrayName() + ln()
		handlerDescription += tln() + tln() + "try" + ln()
		handlerDescription += tln() + tln() + tln() + "item.animate(nextState)" + ln()
		handlerDescription += tln() + tln() + "catch error" + dln()
	}
	else {
		handlerDescription = getFunctionName() + " = () ->" + ln()
		handlerDescription += tln() + "nextState = " + getCyclerName() + "()" + ln()
		handlerDescription += tln() + "for item in " + getLayersArrayName() + ln()
		handlerDescription += tln() + tln() + "try" + ln()
		handlerDescription += tln() + tln() + tln() + "item.animate(nextState)" + ln()
		handlerDescription += tln() + tln() + "catch error" + ln()
		handlerDescription += tln() + "Utils.delay 2, ->" + ln()
		handlerDescription += tln() + tln() + getFunctionName() + "()" + dln()

		handlerDescription += getFunctionName() + "()"
	}
	return handlerDescription
}
