// @import 'inventory/classes/layer.cocoascript'

// @import 'inventory/libs/pluginDefaults.js'
//@import 'inventory/libs/search.js'

// var presets = {
//     myRetina: "retina",
// }
//
// var pluginDomain = "com.addleimb.framer-inventory.retina"
// var userRetinaDefaults = initDefaults(pluginDomain, presets)
//
// var currentDocument = nil

// var isTestingEnvironment = true


// var onRun = function(context) {
// 	isTestingEnvironment = false
// 	generateStatesAction(context)
// }




var runGenerateStates = function(context, isTestingEnvironment) {
	if (isTestingEnvironment == nil) { isTestingEnvironment = false }
	
	var doc = context.document
	var selection = context.selection
	if (isTestingEnvironment) { selection = getTestingSelection() }
	
	currentDocument = doc
	
	var layers = []
	var pasteboardContent = []
	
	var retinaProperty = userRetinaDefaults.myRetina || "retina"

	
	userRetinaDefaults.myRetina = retinaProperty
	saveDefaults(userRetinaDefaults)
	
	var artboards = [[doc currentPage] artboards]
	
	if (selection != nil) {
		for (var i = 0; i < [selection count]; i++) {
			var currentLayer = [selection objectAtIndex: i]
			var layer = new Layer([currentLayer name])
			
			var predicate = NSPredicate.predicateWithFormat("name == %@ && className == %@", [currentLayer name],
																							 [currentLayer className])
			for (var j = 0; j < [artboards count]; j++) {
				var matchingLayers = findLayersMatchingPredicate_inContainer_filterByType(predicate, [artboards objectAtIndex: j])
				if ([matchingLayers count] > 0) {
					layer.addState([matchingLayers firstObject])
				}
			}
			
			layers.push(layer)
		}
	}
	
	for (var i = 0; i < layers.length; i++) {
		pasteboardContent += layers[i].printLayer()
	}

	
	if (!isTestingEnvironment) {
		[[NSPasteboard generalPasteboard] clearContents];
		[[NSPasteboard generalPasteboard] setString:pasteboardContent  forType:NSStringPboardType];
		[doc showMessage:"Done"]
	}
	
	return pasteboardContent
}






var getCurrentPage = function() {
	return [currentDocument currentPage]
}


var addPage = function(oldPage) {
	var newPage = nil
	var pageExistsIndex = -1
	var newPageName = "[NE] " + [oldPage name]
	
	var pages = [currentDocument pages]
	for (var i = 0; i < pages.count(); i++) {
		if ([[pages objectAtIndex: i] name] == newPageName) {
			pageExistsIndex = i
			break
		}
	}
	
	if (pageExistsIndex != -1) {
		newPage = [pages objectAtIndex: pageExistsIndex]
	}
	else {
	    newPage = currentDocument.addBlankPage();
	    newPage.setName(newPageName);
	}
    
	currentDocument.setCurrentPage(oldPage);
    return newPage;
}


var deleteLayerOnPage = function(layer, page) {
	var predicate = NSPredicate.predicateWithFormat("name == %@", [layer name])
	var deleteLayers = findLayersMatchingPredicate_inContainer_filterByType(predicate, page)
	// log("Found " + deleteLayers.count() + "layers")
	
	for (var i = 0; i < deleteLayers.count(); i++) {
		if ([deleteLayers objectAtIndex: i] != nil) {
			[[deleteLayers objectAtIndex: i] removeFromParent]
		}
	}

	return
}