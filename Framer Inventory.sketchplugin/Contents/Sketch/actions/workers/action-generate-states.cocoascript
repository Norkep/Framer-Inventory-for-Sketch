
// gererate code for layers and their states
var runGenerateStates = function(context, isTestingEnvironment) {
	
	var doc = context.document
	var selection = context.selection
	
	if (isTestingEnvironment != nil && isTestingEnvironment) { 
		if (showLog) { log("Prepare custom selection for tests") }
		selection = TestingEnvironment.getTestingSelection()
		
		if (showLog) { log(selection) }
	}
	
	var layers = []
	var pasteboardContent = []
	
	var currentPage = FramerInventory.getCurrentPage()
	var framerInventoryPage = FramerInventory.addPage(currentPage)
	FramerInventory.cleanPage(framerInventoryPage)
	
	// var retinaProperty = userRetinaDefaults.myRetina || "retina"
//
// 	userRetinaDefaults.myRetina = retinaProperty
// 	saveDefaults(userRetinaDefaults)
	
	var artboards = [[doc currentPage] artboards]
	
	if (selection != nil) {
		for (var i = 0; i < [selection count]; i++) {
			var currentLayer = [selection objectAtIndex: i]
			var layer = new Layer([currentLayer name])
			
			var predicate = NSPredicate.predicateWithFormat("name == %@ && className == %@", [currentLayer name],
																							 [currentLayer className])
			for (var j = 0; j < [artboards count]; j++) {
				// if (showLog) { log("Loogking for layer " + [currentLayer name] + " on artboard " + [artboards objectAtIndex: j]) }
				
				var matchingLayers = findLayersMatchingPredicate_inContainer_filterByType(predicate, [artboards objectAtIndex: j])
				if ([matchingLayers count] > 0) {
					// if (showLog) { log("Added a layer") }
					layer.addState([matchingLayers firstObject])
				}
			}
			
			layers.push(layer)
		}
	}
	
	for (var i = 0; i < layers.length; i++) {
		pasteboardContent += layers[i].printLayer()
	}

	
	if (!isTestingEnvironment) {
		[[NSPasteboard generalPasteboard] clearContents];
		[[NSPasteboard generalPasteboard] setString:pasteboardContent  forType:NSStringPboardType];
		[doc showMessage:"Done"]
	}
	
	return pasteboardContent
}
