var configureRetinaEnabled = nil
var configureRetinaValue = nil
var configureRetinaString = nil
var configureMobile = nil
var configureMinimalExport = nil
var configureAutoplay = nil



var block = 40
var paddingLeft = 30
var columnWidth = 375-30*2

var smallFontSize = 13

var lightColor = [NSColor colorWithRed:0.6 green:0.6 blue:0.6 alpha:1];
var fieldColor = [NSColor colorWithSRGBRed:0.97 green:0.97 blue:0.97 alpha:1]
var backgroundColor = [NSColor colorWithRed:0.15 green:0.15 blue:0.15 alpha:1]

var retinaValues = [0.5, 1, 1.5, 2, 3, 4]




// configure plugin
var runSettings = function() {
	initConfigureValues()
	
	var exportWindow = [[NSWindow alloc] init]
	[exportWindow setFrame:NSMakeRect(0, 0, 375, 420) display:false];
	[exportWindow setBackgroundColor:backgroundColor];
	
		
	createLogo(exportWindow)
	createMobileCheckbox(exportWindow)
	createTip(exportWindow)
	createAutocodeCheckbox(exportWindow)
	var retinaValueField = createRetinaValueInput(exportWindow)
	var retinaStringField = createRetinaStringInput(exportWindow)
	
	createMinimalExportCheckbox(exportWindow)
	createAutoplayCheckbox(exportWindow)
	
	createHelpButton(exportWindow)


	
	var saveButton = [[NSButton alloc] initWithFrame:NSMakeRect(paddingLeft - 6, 0, 78, 50)];
	[saveButton setTitle:"Save"];
	[saveButton setBezelStyle:NSRoundedBezelStyle];
	[saveButton setKeyEquivalent:"\r"];
	[saveButton setCOSJSTargetFunction:function(sender) {
		[exportWindow orderOut:nil]
		[NSApp stopModal]
		
		configureRetinaValue = retinaValues[retinaValueField.indexOfSelectedItem()]
		configureRetinaString = retinaStringField.stringValue()
		saveSettings()
	}];
	[saveButton setAction:"callAction:"];
	[[exportWindow contentView] addSubview:saveButton];
	
	
	var cancelButton = [[NSButton alloc] initWithFrame:NSMakeRect(paddingLeft + 78 - 6, 0, 72, 50)];
	[cancelButton setTitle:"Cancel"];
	[cancelButton setBezelStyle:NSRoundedBezelStyle];
	[cancelButton setKeyEquivalent:"\033"]
	[cancelButton setCOSJSTargetFunction:function(sender) {
		[exportWindow orderOut:nil]
		[NSApp stopModal]
	}];
	[cancelButton setAction:"callAction:"]
	[[exportWindow contentView] addSubview:cancelButton];
	
	
	[NSApp runModalForWindow:exportWindow];
}


var initConfigureValues = function() {
	configureRetinaEnabled = userDefaults.myRetinaEnabled
	configureRetinaValue = userDefaults.myRetinaValue
	configureRetinaString = userDefaults.myRetinaString
	configureMobile = userDefaults.myMobile
	configureMinimalExport = userDefaults.myMinimalExport
	configureAutoplay = userDefaults.myAutoplay
}

var saveSettings = function() {
	userDefaults.myRetinaEnabled = configureRetinaEnabled
	userDefaults.myRetinaValue = configureRetinaValue
	userDefaults.myRetinaString = configureRetinaString
	userDefaults.myMobile = configureMobile
	userDefaults.myMinimalExport = configureMinimalExport
	userDefaults.myAutoplay = configureAutoplay
	
	saveDefaults(userDefaults)
	
	[currentDocument showMessage:"Settings saved"]
}

function isRetinaRequired() {
   return NSScreen.isOnRetinaScreen() ? "2x" : "";
}









var createRetinaStringInput = function(exportWindow) {
	var labelDescription = "Off"
	var labelPlaceholder = "Ex: \"retina\""
	var paddingBottom = 220-17
	
	// var titleRetina = [[NSTextField alloc] initWithFrame:NSMakeRect(paddingLeft+100, paddingBottom + 24, 140, 16)];
//     [titleRetina setEditable:false];
//     [titleRetina setBordered:false];
//     [titleRetina setFont:[NSFont boldSystemFontOfSize:smallFontSize]];
//     [titleRetina setTextColor:lightColor];
//     [titleRetina setDrawsBackground:false];
//     [titleRetina setStringValue:labelDescription];
//     [titleRetina sizeToFit];
//     [[exportWindow contentView] addSubview:titleRetina];
    
	var retinaInput = [[NSTextField alloc] initWithFrame:NSMakeRect(paddingLeft+100, paddingBottom+2, 140, 20)];
    [[retinaInput cell] setPlaceholderString:labelPlaceholder];
	// [retinaInput setFocusRingType:NSFocusRingTypeNone];
    [retinaInput setBordered:false];
    [retinaInput setBackgroundColor:fieldColor];
    [retinaInput setStringValue:configureRetinaString];
    [[exportWindow contentView] addSubview:retinaInput];
	
	return retinaInput
}


var createRetinaValueInput = function(exportWindow) {
	var labelDescription = "On"
	var paddingBottom = 220-17
	
	var selectedItemIndex = -1
	var retinaTextValues = []
	
	for (var i = 0; i < retinaValues.length; i++) {
		if (retinaValues[i] == configureRetinaValue) { selectedItemIndex = i; }
		retinaTextValues.push(retinaValues[i] + "x")
	}
	
	if (selectedItemIndex < 0) { selectedItemIndex = 1; }
	
	
	var accessory = NSComboBox.alloc().initWithFrame(NSMakeRect(paddingLeft+20,paddingBottom, 60, 24))
    accessory.addItemsWithObjectValues(retinaTextValues)
    accessory.selectItemAtIndex(selectedItemIndex)
	[[exportWindow contentView] addSubview:accessory];
	
	return accessory
}


var createAutoplayCheckbox = function(exportWindow) {
	var labelDescription = "Autoplay for Simulate Keynote"
	var paddingBottom = 113-17
	
	var titleAutoplay = [[NSTextField alloc] initWithFrame:NSMakeRect(paddingLeft + 21, paddingBottom, columnWidth, 16)];
    [titleAutoplay setEditable:false];
    [titleAutoplay setBordered:false];
    [titleAutoplay setFont:[NSFont boldSystemFontOfSize:smallFontSize]];
    [titleAutoplay setTextColor:lightColor];
    [titleAutoplay setDrawsBackground:false];
    [titleAutoplay setStringValue:labelDescription];
    [titleAutoplay sizeToFit];
    [[exportWindow contentView] addSubview:titleAutoplay];
	
	var autoplayCheckbox = [[NSButton alloc] initWithFrame:NSMakeRect(paddingLeft, paddingBottom, columnWidth, 16)];
	[autoplayCheckbox setButtonType:NSSwitchButton];
	[autoplayCheckbox setTitle:""];
	[autoplayCheckbox setState:configureAutoplay];
	autoplayCheckbox.setCOSJSTargetFunction(function(sender){
		configureAutoplay = configureAutoplay == 0 ? 1 : 0
	})
	[[exportWindow contentView] addSubview:autoplayCheckbox];
	
	return autoplayCheckbox
}


var createAutocodeCheckbox = function(exportWindow) {
	var labelDescription = "Auto Code support (On/Off)"
	var paddingBottom = 282-20
	
	var titleMinimalExport = [[NSTextField alloc] initWithFrame:NSMakeRect(paddingLeft+21, paddingBottom, columnWidth, 16)];
    [titleMinimalExport setEditable:false];
    [titleMinimalExport setBordered:false];
    [titleMinimalExport setFont:[NSFont boldSystemFontOfSize:smallFontSize]];
    [titleMinimalExport setTextColor:lightColor];
    [titleMinimalExport setDrawsBackground:false];
    [titleMinimalExport setStringValue:labelDescription];
    [titleMinimalExport sizeToFit];
    [[exportWindow contentView] addSubview:titleMinimalExport];
	
	var minimalExportCheckbox = [[NSButton alloc] initWithFrame:NSMakeRect(paddingLeft, paddingBottom, columnWidth, 16)];
	[minimalExportCheckbox setButtonType:NSSwitchButton];
	[minimalExportCheckbox setTitle:""];
	[minimalExportCheckbox setState:configureRetinaEnabled];
	minimalExportCheckbox.setCOSJSTargetFunction(function(sender){
		configureRetinaEnabled = configureRetinaEnabled == 0 ? 1 : 0
	})
	[[exportWindow contentView] addSubview:minimalExportCheckbox];
	
	return minimalExportCheckbox
}


var createMinimalExportCheckbox = function(exportWindow) {
	var labelDescription = "Minimal Export for Simulate Keynote"
	var paddingBottom = 140-17
	
	var titleMinimalExport = [[NSTextField alloc] initWithFrame:NSMakeRect(paddingLeft+21, paddingBottom, columnWidth, 16)];
    [titleMinimalExport setEditable:false];
    [titleMinimalExport setBordered:false];
    [titleMinimalExport setFont:[NSFont boldSystemFontOfSize:smallFontSize]];
    [titleMinimalExport setTextColor:lightColor];
    [titleMinimalExport setDrawsBackground:false];
    [titleMinimalExport setStringValue:labelDescription];
    [titleMinimalExport sizeToFit];
    [[exportWindow contentView] addSubview:titleMinimalExport];
	
	var minimalExportCheckbox = [[NSButton alloc] initWithFrame:NSMakeRect(paddingLeft, paddingBottom, columnWidth, 16)];
	[minimalExportCheckbox setButtonType:NSSwitchButton];
	[minimalExportCheckbox setTitle:""];
	[minimalExportCheckbox setState:configureMinimalExport];
	minimalExportCheckbox.setCOSJSTargetFunction(function(sender){
		configureMinimalExport = configureMinimalExport == 0 ? 1 : 0
	})
	[[exportWindow contentView] addSubview:minimalExportCheckbox];
	
	return minimalExportCheckbox
}


var createMobileCheckbox = function(exportWindow) {
	var labelDescription = "iPhone Prototyping"
	var paddingBottom = 303-17
	
	var titleMobile = [[NSTextField alloc] initWithFrame:NSMakeRect(paddingLeft+21, paddingBottom, columnWidth, 16)];
    [titleMobile setEditable:false];
    [titleMobile setBordered:false];
    [titleMobile setFont:[NSFont boldSystemFontOfSize:smallFontSize]];
    [titleMobile setTextColor:lightColor];
    [titleMobile setDrawsBackground:false];
    [titleMobile setStringValue:labelDescription];
    [titleMobile sizeToFit];
    [[exportWindow contentView] addSubview:titleMobile];
	
	var mobileCheckbox = [[NSButton alloc] initWithFrame:NSMakeRect(paddingLeft, paddingBottom, columnWidth, 16)];
	[mobileCheckbox setButtonType:NSSwitchButton];
	[mobileCheckbox setTitle:""];
	[mobileCheckbox setState:configureMobile];
	mobileCheckbox.setCOSJSTargetFunction(function(sender){
		configureMobile = configureMobile == 0 ? 1 : 0
	})
	[[exportWindow contentView] addSubview:mobileCheckbox];
	
	return mobileCheckbox
}

var createLogo = function(exportWindow) {
	var paddingBottom = 338-17
	
	var imagePath = pluginPath + '/images/' + 'logo' + isRetinaRequired() + '.png';
	var image = NSImage.alloc().initByReferencingFile(imagePath);
	var imageView = [[NSImageView alloc] initWithFrame:NSMakeRect(0, paddingBottom, 375, 82)];
	[imageView setImage: image];
	[[exportWindow contentView] addSubview:imageView];
}

var createTip = function(exportWindow) {
	var paddingBottom = 195-17
	
	var imagePath = pluginPath + '/images/' + 'tip' + isRetinaRequired() + '.png';
	var image = NSImage.alloc().initByReferencingFile(imagePath);
	var imageView = [[NSImageView alloc] initWithFrame:NSMakeRect(paddingLeft, paddingBottom, 270, 77)];
	[imageView setImage: image];
	[[exportWindow contentView] addSubview:imageView];
}

var createHelpButton = function(exportWindow) {	
    var helpButton = [[NSButton alloc] initWithFrame:NSMakeRect(375-30-24, 10, 32, 32)];
	[helpButton setBezelStyle:NSHelpButtonBezelStyle];
	[helpButton setTitle:nil];
	[helpButton setCOSJSTargetFunction:function(sender) {
		var url = [NSURL URLWithString:@"http://bit.ly/deep-framer-inventory"];
		[[NSWorkspace sharedWorkspace] openURL:url]
	}];
	[helpButton setAction:"callAction:"]
	[[exportWindow contentView] addSubview:helpButton];
}
