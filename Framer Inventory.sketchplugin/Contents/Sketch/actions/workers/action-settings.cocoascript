var configureRetinaEnabled = nil
var configureRetinaValue = nil
var configureRetinaString = nil
var configureMobile = nil
var configureMinimalExport = nil
var configureAutoplay = nil


var lightColor = [NSColor colorWithRed:0.6 green:0.6 blue:0.6 alpha:1];
var fieldColor = [NSColor colorWithSRGBRed:0.97 green:0.97 blue:0.97 alpha:1]
var backgroundColor = [NSColor colorWithRed:0.15 green:0.15 blue:0.15 alpha:1]

var measureSettingsHeight = 480
var measureSettingsWidth = 300
var measureSettingBlock = 16



var runSettings = function() {

	var exportWindow = [[NSWindow alloc] init]
	exportWindow.setStyleMask(NSTitledWindowMask + NSFullSizeContentViewWindowMask);
	exportWindow.setTitlebarAppearsTransparent(true);
	exportWindow.setTitleVisibility(NSWindowTitleHidden);
	exportWindow.setTitlebarAppearsTransparent(true);
	exportWindow.setMovableByWindowBackground(true);
	exportWindow.setHasShadow(true);
	exportWindow.setLevel(NSFloatingWindowLevel);
	[exportWindow setFrame:NSMakeRect(0, 0, measureSettingsWidth, measureSettingsHeight) display:true];


	var bgImage = ViewInventory.addImage(NSMakeRect(0, 0, measureSettingsWidth, measureSettingsHeight), "settings/bg")
	[[exportWindow contentView] addSubview:bgImage]

	var topImage = ViewInventory.addImage(NSMakeRect(0, 312, measureSettingsWidth, measureSettingsHeight-312), "settings/top")
	[[exportWindow contentView] addSubview:topImage]

	var firstLineViews = createFirstLine()
	for (var i = 0; i < firstLineViews.length; i++) { [[exportWindow contentView] addSubview:firstLineViews[i]] }
	var retinaInput = firstLineViews[0]

	var secondLineViews = createSecondLine()
	for (var i = 0; i < secondLineViews.length; i++) { [[exportWindow contentView] addSubview:secondLineViews[i]] }

	var checkViews = createCheckViews()
	for (var i = 0; i < checkViews.length; i++) { [[exportWindow contentView] addSubview:checkViews[i]] }

	[[exportWindow contentView] addSubview:createVersionView()]
	[[exportWindow contentView] addSubview:createHelpButton()]




	var saveButton = [[NSButton alloc] initWithFrame:NSMakeRect(measureSettingBlock-4, 20, 72, 32)];
	[saveButton setTitle:"Save"];
	[saveButton setBezelStyle:NSRoundedBezelStyle];
	[saveButton setKeyEquivalent:"\r"];
	[saveButton setCOSJSTargetFunction:function(sender) {
		[exportWindow orderOut:nil]
		[NSApp stopModal]
		ToolbarInventory.updateAccessoryControls()

		var newRetinaValue = retinaInput.stringValue() + ""
		var trimmedRetinaValue = newRetinaValue.trim()
		if (trimmedRetinaValue == "") { [currentDocument showMessage:"Scale variable can't be empty. Back to \"" + userDefaults.myRetinaString + "\""] }
		else if (/^[a-zA-Z]+$/.test(trimmedRetinaValue)) {
			userDefaults.myRetinaString = trimmedRetinaValue
			saveDefaults(userDefaults)
			[currentDocument showMessage:"ðŸ’¾"]
		}
		else { [currentDocument showMessage:"Scale variable should contain only letters. Back to \"" + userDefaults.myRetinaString + "\""] }

	}];
	[saveButton setAction:"callAction:"];
	[[exportWindow contentView] addSubview:saveButton];

	[NSApp runModalForWindow:exportWindow];
}





var createFirstLine = function() {

	var retinaInput = [[NSTextField alloc] initWithFrame:NSMakeRect(88, 264-4, 90, 20)];
  [[retinaInput cell] setPlaceholderString:"Ex: \"retina\""];
	[retinaInput setFocusRingType:NSFocusRingTypeNone];
	[retinaInput becomeFirstResponder];
  [retinaInput setBordered:false];
  [retinaInput setBackgroundColor:fieldColor];
  [retinaInput setStringValue:userDefaults.myRetinaString];
	[retinaInput setFont:ViewInventory.fontInputControls()];


	var densityAccessory = NSPopUpButton.alloc().initWithFrame(NSMakeRect(measureSettingBlock, 260-4, 64, 28))
	[[densityAccessory cell] setBezelStyle:NSTexturedRoundedBezelStyle];
	var densityValues = ["Pixels", "Points"];
	densityAccessory.addItemsWithTitles(densityValues)
	densityAccessory.selectItemAtIndex(userDefaults.myRetinaEnabled)
	[densityAccessory setFont:ViewInventory.fontAccessory()];

	densityAccessory.setCOSJSTargetFunction(function(sender){
			userDefaults.myRetinaEnabled = densityAccessory.indexOfSelectedItem()
			saveDefaults(userDefaults)
	})


	var deviceAccessory = NSPopUpButton.alloc().initWithFrame(NSMakeRect(186, 260-4, 90, 28))
	[[deviceAccessory cell] setBezelStyle:NSTexturedRoundedBezelStyle];
	var devices = ScaleInventory.returnDevices()
	for (var i = 0; i < devices.length; i++) {
			deviceAccessory.addItemsWithTitles(devices[i])
			if (i != devices.length - 1) { [[deviceAccessory menu] addItem:[NSMenuItem separatorItem]] }
	}
	deviceAccessory.selectItemAtIndex(ScaleInventory.deviceToSelect(userDefaults.myDevice))
	[deviceAccessory setFont:ViewInventory.fontAccessory()];

	deviceAccessory.setCOSJSTargetFunction(function(sender) {
			userDefaults.myDevice = ScaleInventory.selectedDeviceIndex(deviceAccessory.indexOfSelectedItem())
			saveDefaults(userDefaults)
	})


	return [retinaInput, densityAccessory, deviceAccessory]
}



var createSecondLine = function() {

	var relativeAccessory = NSPopUpButton.alloc().initWithFrame(NSMakeRect(measureSettingBlock, 206-4, 80, 28))
	[[relativeAccessory cell] setBezelStyle:NSTexturedRoundedBezelStyle];
	relativeAccessory.addItemsWithTitles(["Artboard", "Group"])
	relativeAccessory.selectItemAtIndex(userDefaults.myRelativeGroup)
	[relativeAccessory setFont:ViewInventory.fontAccessory()];

	relativeAccessory.setCOSJSTargetFunction(function(sender){
			userDefaults.myRelativeGroup = relativeAccessory.indexOfSelectedItem()
			saveDefaults(userDefaults)
			log(userDefaults.myRelativeGroup)
	})

	return [relativeAccessory]
}


var createCheckViews = function() {

	var titleMinimalExport = [[NSTextField alloc] initWithFrame:NSMakeRect(measureSettingBlock*2+2, 136, measureSettingsWidth - measureSettingBlock*3, measureSettingBlock)];
  [titleMinimalExport setEditable:false];
  [titleMinimalExport setBordered:false];
	[titleMinimalExport setFont:ViewInventory.fontCheckControls()];
  [titleMinimalExport setTextColor:ViewInventory.colorBlack()];
  [titleMinimalExport setDrawsBackground:false];
  [titleMinimalExport setStringValue:"Export Minimal States"];
  [titleMinimalExport sizeToFit];

	var checkboxMinimalExport = [[NSButton alloc] initWithFrame:NSMakeRect(measureSettingBlock, 136-1, measureSettingBlock*12, measureSettingBlock)];
	[checkboxMinimalExport setButtonType:NSSwitchButton];
	[checkboxMinimalExport setTitle:""];
	[checkboxMinimalExport setState:userDefaults.myMinimalExport];
	checkboxMinimalExport.setCOSJSTargetFunction(function(sender){
		userDefaults.myMinimalExport = userDefaults.myMinimalExport == 0 ? 1 : 0
		saveDefaults(userDefaults)
	})



	var titleNotation = [[NSTextField alloc] initWithFrame:NSMakeRect(measureSettingBlock*2+2, 136-44, measureSettingsWidth - measureSettingBlock*3, measureSettingBlock)];
  [titleNotation setEditable:false];
  [titleNotation setBordered:false];
	[titleNotation setFont:ViewInventory.fontCheckControls()];
  [titleNotation setTextColor:ViewInventory.colorBlack()];
  [titleNotation setDrawsBackground:false];
  [titleNotation setStringValue:"Detailed Notation"];
  [titleNotation sizeToFit];

	var checkboxNotation = [[NSButton alloc] initWithFrame:NSMakeRect(measureSettingBlock, 136-44-1, measureSettingBlock*12, measureSettingBlock)];
	[checkboxNotation setButtonType:NSSwitchButton];
	[checkboxNotation setTitle:""];
	[checkboxNotation setState:userDefaults.myDetailedNotation];
	checkboxNotation.setCOSJSTargetFunction(function(sender){
		userDefaults.myDetailedNotation = userDefaults.myDetailedNotation == 0 ? 1 : 0
		saveDefaults(userDefaults)
	})

	return [titleMinimalExport, checkboxMinimalExport, titleNotation, checkboxNotation]
}




var createVersionView = function() {
	var titleVersion = [[NSTextField alloc] initWithFrame:NSMakeRect(0, 325, measureSettingsWidth, measureSettingBlock)];
	[titleVersion setEditable:false];
	[titleVersion setBordered:false];
	[titleVersion setFont:ViewInventory.fontCheckControls()];
	[titleVersion setTextColor:ViewInventory.colorVersion()];
	[titleVersion setDrawsBackground:false];
	[titleVersion setStringValue:"v" + pluginVersion];
	[titleVersion setAlignment:NSCenterTextAlignment];

	return titleVersion
}


var createHelpButton = function() {
  var helpButton = [[NSButton alloc] initWithFrame:NSMakeRect(measureSettingsWidth-32-20+2, 22, 32, 32)];
	[helpButton setBezelStyle:NSHelpButtonBezelStyle];
	[helpButton setTitle:nil];
	[helpButton setCOSJSTargetFunction:function(sender) {
			var url = [NSURL URLWithString:@"http://bit.ly/deep-framer-inventory"];
			[[NSWorkspace sharedWorkspace] openURL:url]
	}];
	[helpButton setAction:"callAction:"]

	return helpButton
}
