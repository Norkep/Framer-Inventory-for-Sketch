@import 'inventory/libs/testing/logger.js'


var environmentLayersNames = []
var environmentPagesNames = []

var runTests = true
var testingSelection = NSMutableArray.array()

var runTestingEnvironment = function(context) {
	var doc = context.document
	var pages = [doc pages]
	var runningPage = [doc currentPage]
	
	var resultingString = ""
	resultingString += "|------------------------------------|\n"
	resultingString += "|----STARTING TESTING ENVIRONMENT----|\n"
	resultingString += "|------------------------------------|\n\n\n"
	
	var skippedPagesNames = 0
	var skippedLayersNames = 0
	
	var pairs = generatePairs()
	var answers = []
	var errorAnswers = []
	
	for (var i = 0; i < pairs.length; i++) {
		var answer = ""
		var pageName = pairs[i][0]
		testingSelection = NSMutableArray.array()
		
		var operatingPage = FramerInventory.findPageWithName(pageName)
		if (showTestLog) { log("Running on page: " + pageName) }
		if (showTestLog) { log("Operating page: " + [operatingPage name]) }
		
		if (operatingPage != nil) {
			
			doc.setCurrentPage(operatingPage)
			[[doc currentPage] deselectAllLayers]

			for (var n = 0; n < pairs[i][1].length; n++) {
				var layerName = pairs[i][1][n]
				
				var layersOnPagePredicate = NSPredicate.predicateWithFormat("name == %@ && class != %@", layerName, "MSArtboardGroup")
				var layersOnPage = findLayersMatchingPredicate_inContainer_filterByType(layersOnPagePredicate, operatingPage)
				
				if (layersOnPage != nil && [layersOnPage count] != 0) {
					[[layersOnPage firstObject] select:true byExpandingSelection:true]
					
					testingSelection = testingSelection.arrayByAddingObjectsFromArray(NSArray.arrayWithObjects([layersOnPage firstObject]))
				}
				else {
					resultingString += "WARNING: Skipped " + layerName + "\n"
					skippedLayersNames++
				}
			}
			
			answer = runGenerateStates(context, runTests)
			answers.push(answer)
			
		}
		else {
			skippedPagesNames++
		}
	}
	
	
	resultingString += "Initialised " + pairs.length + " tests\n"
	if (skippedPagesNames == 0) {
		resultingString += "All testing layers are found\n"
	}
	resultingString += "\n\n\n\n"


	for (var i = 0; i < answers.length; i++) {
		var readReferenceFromFile = pairs[i][0]
		
		resultingString += "Test " + i + ": " + readReferenceFromFile + "\n"
		
		var diff = compareAnswer(answers[i], readReferenceFromFile)
		if (showLog) {
			if (diff == nil) {log(i + " Correct test. Diff is null: " + diff)}
			else { log(i + " diff: " + diff) }
		}

		if (diff != nil) {
			resultingString += diff
			errorAnswers.push(i)
		}
		else {
			resultingString += "Passed"
		}
		resultingString += "\n\n"
	}
	
	
	doc.setCurrentPage(runningPage)
	
	
	if (skippedPagesNames == 0 && skippedLayersNames == 0) {
		[doc showMessage:"Passed " + (pairs.length - errorAnswers.length) + " of " + pairs.length + " tests"]
	}
	else {
		[doc showMessage:"Warning: skipped " + skippedPagesNames + " pages & " + skippedLayersNames + " layers"]
	}
	
	resultingString += "\n\nPassed " + (pairs.length - errorAnswers.length) + " of " + pairs.length + " tests\n"
	writeTestingLog(resultingString)
}




function TestingEnvironment () {}

TestingEnvironment.getTestingSelection = function() {
	return testingSelection
}





// compare functions
var compareAnswer = function(answer, fileName) {
	
	var readText = readFileForAnswer(fileName)
	if(showLog) { log("Read file: " + readText) }
	
	if (readText == "" || readText == '' || readText == nil) { return false }
	return compareTextsPhrase(answer, "" + readText)
}


var compareTexts = function(text1, text2) {
	if (text1 == "" || text2 == "") { return false }
	if (text1.length != text2.length) { return false }
	for (var i = 0; i < text1.length; i++) {
		if (text1[i] != text2[i]) { return false }
	}
	return true
}


var compareTextsPhrase = function(text1, text2) {
	if (text1 == "" || text2 == "") { return "NULL" }

	var lines1 = text1.split("\n");
	var lines2 = text2.split("\n");

	var longestLine = (lines1.length > lines2.length) ? lines2.length : lines1.length
	for (var l = 0; l < longestLine; l++) {
		if (lines1[l] == lines2[l]) {
			continue
		}
		else if (lines1[l] == nil || lines2[l] == nil) { return "NULL" }
		else {
			var text1Array = lines1[l].split(" ");
			var text2Array = lines2[l].split(" ");
			
			var maxLength = (text1Array.length > text2Array.length) ? text2Array.length : text1Array.length
			
			for (var i = 0; i < maxLength; i++) {
					if (text1Array[i] != text2Array[i]) {
						var prev = ""
						if (i != 0) { prev = text1Array[i - 1] }
						var errorLocalString = "IN LINE STARTS: " + lines1[l].split(" ", 1) + "\n"
						errorLocalString += "DIFF: " + prev + " " + text1Array[i]
						log(errorLocalString)
						return errorLocalString
					}
				}
		}
	}
}






// TESTS
var generatePairs = function() {
	var pairs = []
	
	var paramsShapesPage = ["selection 1", "selection 2", "selection 3", "selection 4", "selection 5", "selection 6", "selection 7", "selection 8", "selection 9", "oval 1", "oval 2"]
	pairs.push(["shapes", paramsShapesPage])
	
	pairs.push(["states predict opacity", ["nice"]])
	pairs.push(["states predict no opacity", ["nice"]])
	
	pairs.push(["states predict rotation", ["nice"]])
	pairs.push(["states predict no rotation", ["nice"]])
	
	pairs.push(["states predict corners", ["nice"]])
	pairs.push(["states predict no corners", ["nice"]])
	
	pairs.push(["states predict borders", ["nice"]])
	pairs.push(["states predict no borders", ["nice"]])
	
	pairs.push(["states predict shadows", ["nice"]])
	pairs.push(["states predict no shadows", ["nice"]])
	
	pairs.push(["states predict backgrounds", ["nice"]])
	pairs.push(["states predict no backgrounds", ["nice"]])
	
	pairs.push(["states unexportable rectangle", ["nice"]])
	
	pairs.push(["states groups shadows same", ["nice"]])
	pairs.push(["states groups shadows scaled", ["nice"]])
	
	pairs.push(["layer out artboard position", ["nice"]])
	pairs.push(["layer out artboard position group", ["nice"]])
	
	return pairs
}
