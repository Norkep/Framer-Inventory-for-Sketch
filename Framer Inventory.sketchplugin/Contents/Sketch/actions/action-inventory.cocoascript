@import 'actions/order-inventory.cocoascript'
@import 'actions/statistics-inventory.cocoascript'

@import 'actions/workers/action-replicate-layers.cocoascript'
@import 'actions/workers/action-show-bar.cocoascript'
@import 'actions/workers/action-generate-states.cocoascript'
@import 'actions/workers/action-simulate-keynote.cocoascript'
@import 'actions/workers/action-testing-environment.cocoascript'
@import 'actions/workers/action-settings.cocoascript'

@import 'inventory/classes/layer.cocoascript'
@import 'inventory/libs/pluginDefaults.js'
// @import 'inventory/libs/search.js'

var presets = {
	myRetinaEnabled: 0,
	myRetinaValue: 1,
  myRetinaString: "retina",
	myMobile: 1,
	myMinimalExport: 1,
	myAutoplay: 0,
	myExportPath: "",
	myRelativeGroup: 0,
	myCodeStyleClassic: 1,
	myUserID:  [[NSUUID UUID] UUIDString] + ""
}

var pluginDomain = "com.addleimb.framer-inventory.retina"
var userDefaults = initDefaults(pluginDomain, presets)

var usedStates = []

var pixelDensity = 1
var phoneModel = 0

var exportPageRequired = false
var exportPageName = "Export for Framer Inventory"

var contextUserSelection = NSArray.new()


var chooseAction = function(localDocument, localSelection, actionIdentifier, testing) {
	currentCommandIdentifier = actionIdentifier

	log("inside action?")

	methodStartTime = [NSDate date]

	// FramerInventory.initCurrentDocument(localDocument)
	// FramerInventory.initCurrentSelection(localSelection)

	if (testing) {
		if (showLog) { log("Starting Testing Environment...") }
		runTestingEnvironment()
	}
	else {
		if (actionIdentifier == 0) {
			if (showLog) { log("Starting Replicating Layers...") }
			runReplicateLayers()
		}
		else if (actionIdentifier == 1) {
			if (showLog) { log("Starting Analysing States...") }
			runGenerateStates()
		}
		else if (actionIdentifier == 2) {
			if (showLog) { log("Starting Simulating Keynote...") }
			runSimulateKeynote()
		}
		else if (actionIdentifier == 3) {
			if (showLog) { log("Starting Settings...") }
			runSettings()
		}
		else if (actionIdentifier == 4) {
			FramerInventory.showDoneMessage()
		}
		else if (actionIdentifier == 5) {
			// if (showLog) { log("Starting Compose Symbol...") }
			// runShowBar(context)
		}
		else if (actionIdentifier == 6) {
			if (showLog) { log("Select Export Folder...") }
			FramerInventory.runSelectProjectFolder()
		}
		else if (actionIdentifier == 7) {
				if (showLog) { log("Removing path to folder") }
				FramerInventory.runRemoveProjectFolder()
		}
		else if (actionIdentifier == 8) {
			runShowBar()
		}
		else {
			if (showLog) { log("ERROR: Action is undetermined") }
		}
	}
}








function FramerInventory () {}

FramerInventory.initCurrentDocument = function(context) {
	currentDocument = context.document
}

FramerInventory.initCurrentSelection = function(context) {
	currentDocument = context.document.selectedLayers()
}

FramerInventory.getCurrentPage = function () {
	return [currentDocument currentPage]
}

FramerInventory.deselectLayers = function() {
	[[currentDocument currentPage] deselectAllLayers]
}

FramerInventory.exportLayersFromExportPage = function(oldPage) {
		if (userDefaults.myExportPath == "") { return }
		var framerInvetoryPage = FramerInventory.addExportPageAndReturn(oldPage)
		currentDocument.setCurrentPage(framerInvetoryPage);

		var exportPageLayers = [framerInvetoryPage layers]
		for (var i = 0; i < [exportPageLayers count]; i++) {
				var currentLayer = [exportPageLayers objectAtIndex: i]
				var ancestry = MSImmutableLayerAncestry.ancestryWithMSLayer(currentLayer)
    		var maybeRect = MSSliceTrimming.trimmedRectForLayerAncestry(ancestry)

				var request = MSExportRequest.new()
    		request.rect = maybeRect
				var exportSizes = [[[currentLayer exportOptions] exportFormats] firstObject]
    		request.scale = exportSizes.scale()
	    	request.includeArtboardBackground = false
		    request.configureForLayer(ancestry)


				var dirtyPath = [currentLayer name]
				var fileName = "/" + GenerateInventory.removePath(dirtyPath) + ".png"
				var imageExportPath = userDefaults.myExportPath + fileName
				[currentDocument saveArtboardOrSlice:request toFile:imageExportPath]
		}
		currentDocument.setCurrentPage(oldPage);
}


FramerInventory.addExportPageAndReturn = function(oldPage) {
	var newPage = nil
	var pageExistsIndex = -1

	var pages = [currentDocument pages]
	for (var i = 0; i < pages.count(); i++) {
		if ([[pages objectAtIndex: i] name] == exportPageName) {
			pageExistsIndex = i
			break
		}
	}

	if (pageExistsIndex != -1) {
		newPage = [pages objectAtIndex: pageExistsIndex]
	}
	else {
	    newPage = currentDocument.addBlankPage();
	    newPage.setName(exportPageName);
	}

	currentDocument.setCurrentPage(oldPage);
    return newPage;
}

FramerInventory.cleanExportPage = function() {
	var exportPage = FramerInventory.findPageWithName(exportPageName)
	var exportableLayers = [exportPage exportableLayers]

	for (var i = 0; i < exportableLayers.count(); i++) {
		[[exportableLayers objectAtIndex: i] removeFromParent]
	}
}

FramerInventory.removePage = function(pageName) {
	var oldPage = [currentDocument currentPage]
	var pages = [currentDocument pages]

	for (var i = 0; i < pages.count(); i++) {
		var page = [pages objectAtIndex: i]
		if ([page name] == pageName) { [currentDocument removePage:page] }
	}

	currentDocument.setCurrentPage(oldPage)
}

FramerInventory.findPageWithName = function(pageName) {
	var pages = [currentDocument pages]
	for (var p = 0; p < [pages count]; p++) {
		if ([[pages objectAtIndex:p] name] == pageName) { return [pages objectAtIndex:p] }
	}
	return nil
}

FramerInventory.returnDuplicatedArtboards = function(artboards) {
	for (var i = 0; i < artboards.count(); i++) {
		var current = [artboards objectAtIndex:i]

		for (var j = 0; j < i; j++) {
			var comparableCurrent = [artboards objectAtIndex:j]
			if ([current name] == [comparableCurrent name]) { return comparableCurrent }
		}
	}

	return nil
}

FramerInventory.cleanLayer = function(layer, page) {
	// var pageLayers = [[page layers] array]
	var pageLayers = [page layers]

	for (var i = 0; i < pageLayers.count(); i++) {
		var currentLayer = [pageLayers objectAtIndex: i]
		var layerName = [currentLayer name]
		var type = [currentLayer className]
		if ([layerName isEqualToString:[layer name]]) { [currentLayer removeFromParent] }
	}

	return
}

FramerInventory.getExportPath = function() {
    // var filePath = userDefaults.myExportPath
    // var fileName = currentDocument.displayName().stringByDeletingPathExtension();
    var openPanel = NSOpenPanel.openPanel();

    openPanel.setTitle("Select Images Folder");
    openPanel.setPrompt("Select Folder");
    openPanel.setCanCreateDirectories(true);
    openPanel.setCanChooseDirectories(true);
    openPanel.setNameFieldStringValue("");

    if (openPanel.runModal() != NSOKButton) { return false; }

    userDefaults.myExportPath = openPanel.URL().path();
		saveDefaults(userDefaults)
		return true;
}



// selection based magic

FramerInventory.organiseSelection = function(userSelection) {
	userSelection = OrderInventory.removeArtboardsFromSelection(userSelection)
	if (userSelection.count() == 0) { return }

	FramerInventory.setUserSelection(userSelection)

	var page = FramerInventory.getCurrentPage()
	var artboards = [page artboards]

	if ([[page artboards] firstObject] != nil) {
		var frame = [[[artboards firstObject] frame] size]
		FramerInventory.analyseMobile(frame.width)
	}

	OrderInventory.initSelection(userSelection)

	var unorderedLayers = OrderInventory.returnUnorderedLayers()
	var orderedLayers = OrderInventory.analyseOrder(unorderedLayers)

	// FramerInventory.restoreSelection(userSelection)

	return orderedLayers
}

FramerInventory.setUserSelection = function(userSelection) {
	contextUserSelection = userSelection
}

FramerInventory.restoreSelection = function(selection) {
	var currentPage = FramerInventory.getCurrentPage()
	[currentPage deselectAllLayers]

	for (var i = 0; i < selection.count(); i++) {
		[[selection objectAtIndex:i] select:true byExpandingSelection:true]
	}
}

FramerInventory.createExportSelection = function() {
	var exportPage = FramerInventory.findPageWithName(exportPageName)
	if (exportPage == nil) { return }
	[exportPage deselectAllLayers]

	var exportables = [exportPage exportableLayers]
	for (var i = 0; i < exportables.count(); i++) {
		[[exportables objectAtIndex:i] select:true byExpandingSelection:true]
	}
}








FramerInventory.addStateName = function(stateName) {
	if (usedStates != nil) {
		for (var i = 0; i < usedStates.length; i++) { if (usedStates[i] == stateName) { return } }
	}
	usedStates.push(stateName)
}

FramerInventory.getUsedStatesNames = function() {
	var page = FramerInventory.getCurrentPage()
	var artboards = [page artboards]
	var usedArtboardsNames = []

	for (var i = 0; i < artboards.count(); i++) {
		var currentArtboardName = [[artboards objectAtIndex: i] name]
		if (FramerInventory.isUsed(currentArtboardName)) { usedArtboardsNames.push(currentArtboardName) }
	}

	return usedArtboardsNames
}

FramerInventory.isUsed = function(artboardName) {
	if (usedStates == nil) { return false }

	for (var i = 0; i < usedStates.length; i++) {
		if (artboardName == usedStates[i]) { return true }
	}

	return false
}








FramerInventory.analyseMobile = function(artboardWidth) {
	FramerInventory.setRetinaValue(artboardWidth)
	FramerInventory.setPhoneValue(artboardWidth)
}

FramerInventory.setPhoneValue = function(artboardWidth) {
	if (userDefaults.myMobile == 0 || artboardWidth == nil) { phoneModel = 0 }
	else if (artboardWidth == 320 || artboardWidth == 640) { phoneModel = 1 }
	else if (artboardWidth == 375 || artboardWidth == 750) { phoneModel = 2 }
	else if (artboardWidth == 414 || artboardWidth == 1242) { phoneModel = 3 }
	else { phoneModel = 0 }
}

FramerInventory.getPhoneValue = function() {
	return phoneModel
}

FramerInventory.setRetinaValue = function(artboardWidth) {
	if (userDefaults.myMobile == 1) {
		if (artboardWidth == 640 || artboardWidth == 750 || artboardWidth == 1242) { pixelDensity = 1 }
		else if (artboardWidth == 320 || artboardWidth == 375) { pixelDensity = 2 }
		else if (artboardWidth == 414) { pixelDensity = 3 }
		else {
			if (showLog) { log("Pixel density is undetermined") }
			pixelDensity = pixelDensity = userDefaults.myRetinaValue
		}
	}
	else { pixelDensity = userDefaults.myRetinaValue }
}

FramerInventory.getRetinaValue = function() {
	return pixelDensity
}








FramerInventory.requireExportPage = function() {
	exportPageRequired = true
}

FramerInventory.isExportPageRequired = function() {
	return exportPageRequired
}

FramerInventory.showDoneMessage = function() {
	var message = "Done"

	if (OrderInventory.getWarnings() != "") { message += ". Warning: \"" + OrderInventory.getWarnings() + "\" has several types." }

	if (FramerInventory.isExportPageRequired()) {
			if (userDefaults.myExportPath != "") {
				FramerInventory.exportLayersFromExportPage(FramerInventory.getCurrentPage())
				message = "Done. Assets are exported to " + userDefaults.myExportPath
				FramerInventory.removePage(exportPageName)
			}
			else {
				message = "Done. Export assets from \"" + exportPageName + "\" page"
			}
	}
	else { FramerInventory.removePage(exportPageName) }

	[currentDocument showMessage:message]

	FramerInventory.createExportSelection()
	FramerInventory.restoreSelection(contextUserSelection)

	var methodFinishTime = [NSDate date]
	var executionTime = [methodFinishTime timeIntervalSinceDate:methodStartTime]
	if (showLog) { log("Completion time: " + executionTime) }
}


FramerInventory.runSelectProjectFolder = function() {
		var isPathSelected = FramerInventory.getExportPath()

		var message = userDefaults.myExportPath
		if (!isPathSelected && message) { message = "Canceled. Previous Export folder is selected" }
		else if (!isPathSelected) { message = "Canceled. Export folder is not selected" }
		else { message = "Done. Selected folder: " + message }

		[currentDocument showMessage:message]
}

FramerInventory.runRemoveProjectFolder = function() {
		if (userDefaults.myExportPath == "") {
				[currentDocument showMessage:"No Export Folder selected"]
				return
		}
		userDefaults.myExportPath = ""
		saveDefaults(userDefaults)
		[currentDocument showMessage:"Done. No Export Folder selected"]
}
