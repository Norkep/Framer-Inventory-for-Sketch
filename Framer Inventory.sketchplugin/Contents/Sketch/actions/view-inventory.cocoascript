
function ViewInventory () {}

ViewInventory.smileWarning = function() { return "⚠️ " }
ViewInventory.smileDone = function() { return "👍🏻 " }
ViewInventory.smileForget = function() { return "🙈" }

ViewInventory.placeHolderImport = function() { return "Select Layers on Artboards" }
ViewInventory.placeHolderScene = function() { return "Exportable Layers on Artboards" }
ViewInventory.placeHolderSelectPath = function() { return "Please, select Framer folder" }

ViewInventory.colorBlack = function() { return [NSColor colorWithRed:0.0 green:0.0 blue:0.0 alpha:1] }
ViewInventory.colorWhite = function() { return [NSColor colorWithRed:1.0 green:1.0 blue:1.0 alpha:1] }
ViewInventory.colorVersion = function() { return [NSColor colorWithRed:0.0 green:0.0 blue:0.0 alpha:0.5] }
ViewInventory.colorBackground = function() { return [NSColor colorWithRed:0.15 green:0.15 blue:0.15 alpha:1] }

ViewInventory.fontCheckControls = function() { return [NSFont systemFontOfSize:12 weight:NSFontWeightRegular] }
ViewInventory.fontInputControls = function() { return [NSFont systemFontOfSize:12 weight:NSFontWeightMedium] }
ViewInventory.fontAccessory = function() { return [NSFont systemFontOfSize:10 weight:NSFontWeightBold] }
ViewInventory.fontActionButton = function() { return [NSFont systemFontOfSize:13 weight:NSFontWeightMedium] }
ViewInventory.fontSelection = function() { return [NSFont systemFontOfSize:10 weight:NSFontWeightMedium] }


// Buttons
ViewInventory.layersButtonNone = function() { return NSMakeRect(0, 0, 0, 0) }
ViewInventory.layersButton = function() { return NSMakeRect(8, 9, 50, 18) }
ViewInventory.layersButtonSeveral = function() { return NSMakeRect(8, 9, 55, 18) }

ViewInventory.statesButtonNone = function() { return NSMakeRect(0, 0, 0, 0) }
ViewInventory.statesButton = function() { return NSMakeRect(64, 9, 70, 18) }
ViewInventory.statesButtonSeveral = function() { return NSMakeRect(69, 9, 124, 18) }
ViewInventory.statesButtonSelected = function() { return NSMakeRect(8, 9, 102, 18) }
ViewInventory.statesButtonSelectedSelected = function() { return NSMakeRect(8, 9, 155, 18) }

// ViewInventory.sceneButtonNone = function() { return NSMakeRect(0, 0, 0, 0) }
ViewInventory.sceneButton = function() { return NSMakeRect(8, 9, 100, 18) }
ViewInventory.sceneButtonSelected = function() { return NSMakeRect(8, 9, 186, 18) }

ViewInventory.adaptButtonsNone = function(layersButton, statesButton, images) {
    layersButton.frame = ViewInventory.layersButtonNone()
    statesButton.frame = ViewInventory.statesButtonNone()
}

ViewInventory.adaptButtonsBase = function(layersButton, statesButton, images) {
    layersButton.frame = ViewInventory.layersButton()
    statesButton.frame = ViewInventory.statesButton()
    layersButton.setImage(images[0])
    statesButton.setImage(images[2])
}

ViewInventory.adaptButtonsSeveral = function(layersButton, statesButton, images) {
    layersButton.frame = ViewInventory.layersButtonSeveral()
    statesButton.frame = ViewInventory.statesButtonSeveral()
    layersButton.setImage(images[1])
    statesButton.setImage(images[3])
}

ViewInventory.adaptButtonsSelected = function(layersButton, statesButton, images) {
    layersButton.frame = ViewInventory.layersButtonNone()
    statesButton.frame = ViewInventory.statesButtonSelected()
    statesButton.setImage(images[4])
    // log(layersButton.frame())
    // log(statesButton.frame())
}

ViewInventory.adaptButtonsSelectedSeveral = function(layersButton, statesButton, images) {
    layersButton.frame = ViewInventory.layersButtonNone()
    statesButton.frame = ViewInventory.statesButtonSelectedSelected()
    statesButton.setImage(images[5])
}

ViewInventory.adaptSceneButtons = function(sceneButton, images) {
    sceneButton.frame = ViewInventory.sceneButton()
    sceneButton.setImage(images[6])
}

ViewInventory.adaptSceneButtonsSelected = function(sceneButton, images) {
  sceneButton.frame = ViewInventory.sceneButtonSelected()
  sceneButton.setImage(images[7])
}


ViewInventory.returnButtonsImages = function() {
    var image0 = ViewInventory.getImage(ViewInventory.layersButton(), "toolbar/layers")
    var image1 = ViewInventory.getImage(ViewInventory.layersButtonSeveral(), "toolbar/layers several")

    var image2 = ViewInventory.getImage(ViewInventory.statesButton(), "toolbar/states")
    var image3 = ViewInventory.getImage(ViewInventory.statesButtonSeveral(), "toolbar/states several")
    var image4 = ViewInventory.getImage(ViewInventory.statesButtonSelected(), "toolbar/states selected")
    var image5 = ViewInventory.getImage(ViewInventory.statesButtonSelectedSelected(), "toolbar/states selected several")

    var image6 = ViewInventory.getImage(ViewInventory.sceneButton(), "toolbar/simulate")
    var image7 = ViewInventory.getImage(ViewInventory.sceneButtonSelected(), "toolbar/simulate selected")

    return [image0, image1, image2, image3, image4, image5, image6, image7]
}




ViewInventory.sizeWindowHeight = function() { return 108 }
ViewInventory.sizeWindowWidth = function() { return 244 }


ViewInventory.getImage = function(size, name) {
    var isRetinaDisplay = (NSScreen.mainScreen().backingScaleFactor() > 1)? true: false;
    var suffix = (isRetinaDisplay)? "@2x": "";
    var imageURL = NSURL.fileURLWithPath(pluginPath + "/images/" + name + suffix + ".png");
    var image = NSImage.alloc().initWithContentsOfURL(imageURL);
    return image
}

ViewInventory.addButton = function(rect, name, callAction) {
    var button = NSButton.alloc().initWithFrame(rect);
    var image = ViewInventory.getImage(rect.size, name);

    button.setImage(image);
    button.setBordered(false);
    button.sizeToFit();
    button.setButtonType(NSMomentaryChangeButton);
    button.setCOSJSTargetFunction(callAction);
    button.setAction("callAction:");
    return button;
}

ViewInventory.addImage = function(rect, name) {
    var view = NSImageView.alloc().initWithFrame(rect)
    var image = ViewInventory.getImage(rect.size, name);
    view.setImage(image);
    return view;
}


ViewInventory.optimiseFramerPath = function() {
    return userDefaults.exportFramerFolder.split("/").pop();
}








ViewInventory.getEmptyToolbarViews = function() {
    var saveButton = [[NSButton alloc] initWithFrame:NSMakeRect(42, 16, 160, 32)];
    [saveButton setTitle:"Select Framer Folder"];
    [saveButton setBezelStyle:NSRoundedBezelStyle];
    [saveButton setKeyEquivalent:"\r"];
    [saveButton setCOSJSTargetFunction:function(sender) {
        ToolbarInventory.updateContext();
        FramerInventory.runSelectProjectFolder()
        ToolbarInventory.setContentView()
    }];
    [saveButton setAction:"callAction:"];

    var emptyView = ViewInventory.addImage(NSMakeRect(0, 0, ViewInventory.sizeWindowWidth(), ViewInventory.sizeWindowHeight()), "toolbar/empty")

    return [emptyView, saveButton]
}




ViewInventory.getImportViews = function() {
    var layersButton = ViewInventory.addButton( NSMakeRect(8, 9, 50, 18), "toolbar/layer",
        function(sender){
            ToolbarInventory.updateContext();
            runReplicateLayers()
    })

    var statesButton = ViewInventory.addButton( NSMakeRect(64, 9, 70, 18), "toolbar/all states",
        function(sender){
            ToolbarInventory.updateContext();
            runGenerateStates()
    })

    var changeModeButton = ViewInventory.addButton( NSMakeRect(8, 55, 52, 21), "toolbar/import",
        function(sender){
            ToolbarInventory.changeContentView();
    })

    var relativeAccessory = NSPopUpButton.alloc().initWithFrame(NSMakeRect(156, 54, 80, 22))
    [[relativeAccessory cell] setBezelStyle:NSTexturedRoundedBezelStyle];
    var densityValues = ["Artboard", "Group"];
    relativeAccessory.addItemsWithTitles(densityValues)
    relativeAccessory.selectItemAtIndex(userDefaults.myRelativeGroup)
    [relativeAccessory setFont:ViewInventory.fontAccessory()];

    relativeAccessory.setCOSJSTargetFunction(function(sender){
        userDefaults.myRelativeGroup = relativeAccessory.indexOfSelectedItem()
        saveDefaults(Status.userDomain(), userDefaults)
    })

    return [layersButton, statesButton, relativeAccessory, changeModeButton]
}

ViewInventory.getSceneViews = function() {

    var changeModeButton = ViewInventory.addButton( NSMakeRect(8, 55, 52, 21), "toolbar/scene",
        function(sender){
            ToolbarInventory.changeContentView();
    })


    var sceneButton = ViewInventory.addButton(ViewInventory.sceneButton(), "toolbar/simulate",
        function(sender){
            ToolbarInventory.updateContext();
            runSimulateKeynote()
    })

    return [changeModeButton, sceneButton]
}




ViewInventory.getGeneralToolbarViews = function() {
    var backgroundView = ViewInventory.addImage(NSMakeRect(0, 0, ViewInventory.sizeWindowWidth(), ViewInventory.sizeWindowHeight()), "toolbar/background")
    var optionsView = ViewInventory.addImage(NSMakeRect(0, 50, ViewInventory.sizeWindowWidth(), 30), "toolbar/options")

    var addButton = ViewInventory.addButton( NSMakeRect(21, 87, 14, 15), "toolbar/add",
        function(sender){
            ToolbarInventory.updateContext();
            FramerInventory.runSelectProjectFolder()
            ToolbarInventory.setContentView()
    })
    var removeButton = ViewInventory.addButton( NSMakeRect(7, 87, 15, 15), "toolbar/remove",
        function(sender){
            ToolbarInventory.updateContext();
            FramerInventory.runRemoveProjectFolder()
            ToolbarInventory.setContentView()
    })


    var moreButton = NSPopUpButton.alloc().initWithFrame(NSMakeRect(216, 9, 21, 18))
    [[moreButton cell] setArrowPosition:false];
    [moreButton setBordered:false];
    [moreButton setImagePosition:NSImageOnly];
    // [moreButton setImagePosition:NSImageOverlaps];
    [[moreButton cell] setBackgroundColor:[NSColor redColor]];
    moreButton.addItemsWithTitles(["one", "two"])
    [[moreButton cell] setUsesItemFromMenu:false];

    var isRetinaDisplay = (NSScreen.mainScreen().backingScaleFactor() > 1)? true: false;
    var suffix = (isRetinaDisplay)? "@2x": "";
    var imageURL = NSURL.fileURLWithPath(pluginPath + "/images/toolbar/more" + suffix + ".png");
    var image = NSImage.alloc().initWithContentsOfURL(imageURL);

    var item = [[NSMenuItem allocWithZone:nil] initWithTitle:"" action:nil keyEquivalent:""];
    [item setImage:image];
    [item setOnStateImage:nil];
    [item setState:NSOffState]
    [item setMixedStateImage:nil];
    [[moreButton cell] setMenuItem:item];
    // [item release];
    [moreButton setPreferredEdge:NSMinXEdge];

    moreButton.setCOSJSTargetFunction(function(sender){
        // ToolbarInventory.updateImportButtons()
        log(ToolbarInventory.toolbarMode())
    })


    var deviceAccessory = NSPopUpButton.alloc().initWithFrame(NSMakeRect(66, 54, 85, 22))
    [[deviceAccessory cell] setBezelStyle:NSTexturedRoundedBezelStyle];
    var devices = ScaleInventory.returnDevices()
    for (var i = 0; i < devices.length; i++) {
        deviceAccessory.addItemsWithTitles(devices[i])
        if (i != devices.length - 1) { [[deviceAccessory menu] addItem:[NSMenuItem separatorItem]] }
    }
    deviceAccessory.selectItemAtIndex(ScaleInventory.deviceToSelect(userDefaults.myDevice))
    [deviceAccessory setFont:ViewInventory.fontAccessory()];

    deviceAccessory.setCOSJSTargetFunction(function(sender){
        userDefaults.myDevice = ScaleInventory.selectedDeviceIndex(deviceAccessory.indexOfSelectedItem())
        saveDefaults(Status.userDomain(), userDefaults)
        ToolbarInventory.updateAccessoryControls()
    })

    return [backgroundView, optionsView, addButton, removeButton, moreButton, deviceAccessory]
}


ViewInventory.createImportPanel = function() {
  var view = [[NSView alloc] initWithFrame:NSMakeRect(0, 0, ViewInventory.sizeWindowWidth(), ViewInventory.sizeWindowHeight())];

  var views = ViewInventory.getGeneralToolbarViews()
  for (var i = 0; i < views.length; i++) { view.addSubview(views[i]) }

  var closeViews = ViewInventory.getCloseToolbarViews()
  for (var i = 0; i < closeViews.length; i++) { view.addSubview(closeViews[i]) }

  var importViews = ViewInventory.getImportViews()
  for (var i = 0; i < importViews.length; i++) { view.addSubview(importViews[i]) }

  var labels = ViewInventory.getLabels(ViewInventory.placeHolderImport())
  for (var i = 0; i < labels.length; i++) { view.addSubview(labels[i]) }

  return [view, labels[0], labels[1], importViews[0], importViews[1], importViews[2], views[5]]
}


ViewInventory.createScenePanel = function() {
  var view = [[NSView alloc] initWithFrame:NSMakeRect(0, 0, ViewInventory.sizeWindowWidth(), ViewInventory.sizeWindowHeight())];

  var views = ViewInventory.getGeneralToolbarViews()
  for (var i = 0; i < views.length; i++) { view.addSubview(views[i]) }

  var closeViews = ViewInventory.getCloseToolbarViews()
  for (var i = 0; i < closeViews.length; i++) { view.addSubview(closeViews[i]) }

  var sceneViews = ViewInventory.getSceneViews()
  for (var i = 0; i < sceneViews.length; i++) { view.addSubview(sceneViews[i]) }

  var labels = ViewInventory.getLabels(ViewInventory.placeHolderScene())
  for (var i = 0; i < labels.length; i++) { view.addSubview(labels[i]) }

  return [view, labels[0], labels[1], views[5], sceneViews[1]]
}




ViewInventory.createEmptyPanel = function() {
  var view = [[NSView alloc] initWithFrame:NSMakeRect(0, 0, ViewInventory.sizeWindowWidth(), ViewInventory.sizeWindowHeight())];

  var views = ViewInventory.getEmptyToolbarViews()
  for (var i = 0; i < views.length; i++) { view.addSubview(views[i]) }

  var closeViews = ViewInventory.getCloseToolbarViews()
  for (var i = 0; i < closeViews.length; i++) { view.addSubview(closeViews[i]) }

  return view
}


ViewInventory.getCloseToolbarViews = function() {
    var closeButton = ViewInventory.addButton(NSMakeRect(222, 87, 15, 15), "toolbar/close",
        function(sender){
            coscript.setShouldKeepAround(false)
            ToolbarInventory.returnInstance().returnPanel().close();
            ToolbarInventory.updateClassInstance(nil)
            ToolbarInventory.removeInstance()
        }
    )

    var settingsButton = ViewInventory.addButton( NSMakeRect(205, 87, 15, 15), "toolbar/settings",
        function(sender){
            ToolbarInventory.updateContext();
            runSettings()
    })
    return [closeButton, settingsButton]
}

ViewInventory.getLabels = function(placeHolderText) {
  var pathLabel = [[NSTextField alloc] initWithFrame:NSMakeRect(41, 84, 160, 20)];
  [pathLabel setEditable:false];
  [pathLabel setBordered:false];
  [pathLabel setFont:ViewInventory.fontCheckControls()];
  [pathLabel setTextColor:[NSColor colorWithRed:0 green:0 blue:0 alpha:0.3]];
  [pathLabel setDrawsBackground:false];
  [pathLabel setStringValue:ViewInventory.placeHolderSelectPath()];

  var selectionLabel = [[NSTextField alloc] initWithFrame:NSMakeRect(8, 30, 228, 16)];
  [selectionLabel setEditable:false];
  [selectionLabel setBordered:false];
  [selectionLabel setFont:ViewInventory.fontSelection()];
  [selectionLabel setTextColor:[NSColor colorWithRed:0 green:0 blue:0 alpha:0.3]];
  [selectionLabel setDrawsBackground:false];
  [selectionLabel setStringValue:placeHolderText];

  return [pathLabel, selectionLabel]
}
