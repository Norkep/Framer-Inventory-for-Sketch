
function ViewInventory () {}

ViewInventory.smileWarning = function() { return "⚠️ " }
ViewInventory.smileDone = function() { return "👍🏻 " }
ViewInventory.smileForget = function() { return "🙈" }

ViewInventory.colorBlack = function() { return [NSColor colorWithRed:0.0 green:0.0 blue:0.0 alpha:1] }
ViewInventory.colorWhite = function() { return [NSColor colorWithRed:1.0 green:1.0 blue:1.0 alpha:1] }
ViewInventory.colorVersion = function() { return [NSColor colorWithRed:0.0 green:0.0 blue:0.0 alpha:0.5] }
ViewInventory.colorBackground = function() { return [NSColor colorWithRed:0.15 green:0.15 blue:0.15 alpha:1] }

ViewInventory.fontCheckControls = function() { return [NSFont systemFontOfSize:12 weight:NSFontWeightRegular] }
ViewInventory.fontInputControls = function() { return [NSFont systemFontOfSize:12 weight:NSFontWeightMedium] }
ViewInventory.fontAccessory = function() { return [NSFont systemFontOfSize:10 weight:NSFontWeightBold] }
ViewInventory.fontActionButton = function() { return [NSFont systemFontOfSize:13 weight:NSFontWeightMedium] }

var measureRoundButtonsSide = 10
var measureRoundButtons = 6
var defaultPathLabel = "Please, select Framer folder"
ViewInventory.sizeWindowHeight = function() { return 70 }
ViewInventory.sizeWindowWidth = function() { return 440 }


ViewInventory.getImage = function(size, name) {
    var isRetinaDisplay = (NSScreen.mainScreen().backingScaleFactor() > 1)? true: false;
    var suffix = (isRetinaDisplay)? "@2x": "";
    var imageURL = NSURL.fileURLWithPath(pluginPath + "/images/" + name + suffix + ".png");
    var image = NSImage.alloc().initWithContentsOfURL(imageURL);
    return image
}

ViewInventory.addButton = function(rect, name, callAction) {
    var button = NSButton.alloc().initWithFrame(rect);
    var image = ViewInventory.getImage(rect.size, name);

    button.setImage(image);
    button.setBordered(false);
    button.sizeToFit();
    button.setButtonType(NSMomentaryChangeButton);
    button.setCOSJSTargetFunction(callAction);
    button.setAction("callAction:");
    return button;
}

ViewInventory.addImage = function(rect, name) {
    var view = NSImageView.alloc().initWithFrame(rect)
    var image = ViewInventory.getImage(rect.size, name);
    view.setImage(image);
    return view;
}


ViewInventory.optimiseFramerPath = function() {
    return userDefaults.exportFramerFolder.split("/").pop();
}





ViewInventory.getEmptyToolbarViews = function() {
    var saveButton = [[NSButton alloc] initWithFrame:NSMakeRect(140, 2, 160, 32)];
    [saveButton setTitle:"Select Framer Folder"];
    [saveButton setBezelStyle:NSRoundedBezelStyle];
    [saveButton setKeyEquivalent:"\r"];
    [saveButton setCOSJSTargetFunction:function(sender) {
        ToolbarInventory.updateContext();
        FramerInventory.runSelectProjectFolder()
        ToolbarInventory.setContentView()
    }];
    [saveButton setAction:"callAction:"];

    var emptyView = ViewInventory.addImage(NSMakeRect(0, 0, ViewInventory.sizeWindowWidth(), ViewInventory.sizeWindowHeight()), "toolbar/empty")

    return [emptyView, saveButton]
}

ViewInventory.getGeneralToolbarViews = function() {
    var measureIcons = 16

    var addButton = ViewInventory.addButton( NSMakeRect(ViewInventory.sizeWindowWidth() - measureRoundButtonsSide - measureRoundButtons * 5, measureRoundButtonsBottom,measureRoundButtons*2,measureRoundButtons*2), "toolbar/add",
        function(sender){
            ToolbarInventory.updateContext();
            FramerInventory.runSelectProjectFolder()
            ToolbarInventory.setContentView()
    })
    var removeButton = ViewInventory.addButton( NSMakeRect(ViewInventory.sizeWindowWidth() - measureRoundButtonsSide - measureRoundButtons * 8, measureRoundButtonsBottom,measureRoundButtons*2,measureRoundButtons*2), "toolbar/remove",
        function(sender){
            ToolbarInventory.updateContext();
            FramerInventory.runRemoveProjectFolder()
            ToolbarInventory.setContentView()
    })


    var moreButton = NSPopUpButton.alloc().initWithFrame(NSMakeRect(ViewInventory.sizeWindowWidth() - measureRoundButtonsSide - measureRoundButtons * 2, measureRoundButtonsBottom,measureRoundButtons*2,measureRoundButtons*2))
    [[moreButton cell] setArrowPosition:false];
    [moreButton setBordered:false];
    [moreButton setImagePosition:NSImageOnly];
    // [moreButton setImagePosition:NSImageOverlaps];
    [[moreButton cell] setBackgroundColor:[NSColor redColor]];
    moreButton.addItemsWithTitles(["one", "two"])
    [[moreButton cell] setUsesItemFromMenu:false];

    var isRetinaDisplay = (NSScreen.mainScreen().backingScaleFactor() > 1)? true: false;
    var suffix = (isRetinaDisplay)? "@2x": "";
    var imageURL = NSURL.fileURLWithPath(pluginPath + "/images/toolbar/more" + suffix + ".png");
    var image = NSImage.alloc().initWithContentsOfURL(imageURL);

    var item = [[NSMenuItem allocWithZone:nil] initWithTitle:"" action:nil keyEquivalent:""];
    [item setImage:image];
    [item setOnStateImage:nil];
    [item setState:NSOffState]
    [item setMixedStateImage:nil];
    [[moreButton cell] setMenuItem:item];
    // [item release];
    [moreButton setPreferredEdge:NSMinXEdge];



    // Action Icons

    var sceneButton = ViewInventory.addButton( NSMakeRect(measureIcons*7 - measureIcons/4, measureIcons, measureIcons*2, measureIcons*2), "toolbar/simulate",
        function(sender){
            ToolbarInventory.updateContext();
            runSimulateKeynote()
    })
    var statesButton = ViewInventory.addButton( NSMakeRect(measureIcons*4 - measureIcons/4, measureIcons, measureIcons*2, measureIcons*2), "toolbar/generate",
        function(sender){
            ToolbarInventory.updateContext();
            runGenerateStates()
    })
    var layersButton = ViewInventory.addButton( NSMakeRect(measureIcons - measureIcons/4, measureIcons, measureIcons*2, measureIcons*2), "toolbar/replicate",
        function(sender){
            ToolbarInventory.updateContext();
            runReplicateLayers()
    })



    relativeAccessory = NSPopUpButton.alloc().initWithFrame(NSMakeRect(340-64-80, 16, 80, 28))
    [[relativeAccessory cell] setBezelStyle:NSTexturedRoundedBezelStyle];
    var densityValues = ["Artboard", "Group"];
    relativeAccessory.addItemsWithTitles(densityValues)
    relativeAccessory.selectItemAtIndex(userDefaults.myRelativeGroup)
    [relativeAccessory setFont:ViewInventory.fontAccessory()];

    relativeAccessory.setCOSJSTargetFunction(function(sender){
        userDefaults.myRelativeGroup = relativeAccessory.indexOfSelectedItem()
        saveDefaults(userDefaults)
    })

    densityAccessory = NSPopUpButton.alloc().initWithFrame(NSMakeRect(340-64, 16, 64, 28))
    [[densityAccessory cell] setBezelStyle:NSTexturedRoundedBezelStyle];
    var densityValues = ["Pixels", "Points"];
    densityAccessory.addItemsWithTitles(densityValues)
    densityAccessory.selectItemAtIndex(userDefaults.myRetinaEnabled)
    [densityAccessory setFont:ViewInventory.fontAccessory()];

    densityAccessory.setCOSJSTargetFunction(function(sender){
        userDefaults.myRetinaEnabled = densityAccessory.indexOfSelectedItem()
        saveDefaults(userDefaults)
    })


    deviceAccessory = NSPopUpButton.alloc().initWithFrame(NSMakeRect(340, 16, 90, 28))
    [[deviceAccessory cell] setBezelStyle:NSTexturedRoundedBezelStyle];
    var devices = ScaleInventory.returnDevices()
    for (var i = 0; i < devices.length; i++) {
        deviceAccessory.addItemsWithTitles(devices[i])
        if (i != devices.length - 1) { [[deviceAccessory menu] addItem:[NSMenuItem separatorItem]] }
    }
    deviceAccessory.selectItemAtIndex(ScaleInventory.deviceToSelect(userDefaults.myDevice))
    [deviceAccessory setFont:ViewInventory.fontAccessory()];

    deviceAccessory.setCOSJSTargetFunction(function(sender){
        userDefaults.myDevice = ScaleInventory.selectedDeviceIndex(deviceAccessory.indexOfSelectedItem())
        saveDefaults(userDefaults)
    })


    var textsView = ViewInventory.addImage(NSMakeRect(0, 0, ViewInventory.sizeWindowWidth(), measureIcons), "toolbar/texts")

    return [addButton, removeButton, moreButton, layersButton, statesButton, sceneButton, relativeAccessory, densityAccessory, deviceAccessory, textsView]
}


ViewInventory.createContentViewForToolbal = function() {
  var view = [[NSView alloc] initWithFrame:NSMakeRect(0, 0, ViewInventory.sizeWindowWidth(), ViewInventory.sizeWindowHeight())];

  var pathLabel = [[NSTextField alloc] initWithFrame:NSMakeRect(0, 48, ViewInventory.sizeWindowWidth(), 20)];
  [pathLabel setEditable:false];
  [pathLabel setBordered:false];
  [pathLabel setAlignment:NSCenterTextAlignment]
  [pathLabel setFont:ViewInventory.fontCheckControls()];
  [pathLabel setTextColor:[NSColor colorWithRed:0.6 green:0.6 blue:0.6 alpha:1]];
  [pathLabel setDrawsBackground:false];
  [pathLabel setStringValue:defaultPathLabel];
  view.addSubview(pathLabel)

  var selectionLabel = [[NSTextField alloc] initWithFrame:NSMakeRect(0, 40, ViewInventory.sizeWindowWidth(), 20)];
  [selectionLabel setEditable:false];
  [selectionLabel setBordered:false];
  [selectionLabel setAlignment:NSCenterTextAlignment]
  [selectionLabel setFont:ViewInventory.fontCheckControls()];
  [selectionLabel setTextColor:[NSColor colorWithRed:0.6 green:0.6 blue:0.6 alpha:1]];
  [selectionLabel setDrawsBackground:false];
  [selectionLabel setStringValue:"Select Layers"];
  view.addSubview(selectionLabel)

  var views = ViewInventory.getGeneralToolbarViews()
  for (var i = 0; i < views.length; i++) { view.addSubview(views[i]) }

  var closeViews = ViewInventory.getCloseToolbarViews()
  for (var i = 0; i < closeViews.length; i++) { view.addSubview(closeViews[i]) }

  return [view, pathLabel, selectionLabel]
}

ViewInventory.createEmptyContentViewForToolbal = function() {
  var view = [[NSView alloc] initWithFrame:NSMakeRect(0, 0, ViewInventory.sizeWindowWidth(), ViewInventory.sizeWindowHeight())];

  var views = ViewInventory.getEmptyToolbarViews()
  for (var i = 0; i < views.length; i++) { view.addSubview(views[i]) }

  var closeViews = ViewInventory.getCloseToolbarViews()
  for (var i = 0; i < closeViews.length; i++) { view.addSubview(closeViews[i]) }

  return view
}


ViewInventory.getCloseToolbarViews = function() {
    var closeButton = ViewInventory.addButton(NSMakeRect(measureRoundButtonsSide, measureRoundButtonsBottom, measureRoundButtons*2, measureRoundButtons*2), "toolbar/close",
        function(sender){
            coscript.setShouldKeepAround(false)
            ToolbarInventory.returnInstance().returnPanel().close();
            ToolbarInventory.updateClassInstance(nil)
            ToolbarInventory.removeInstance()
        }
    )

    var settingsButton = ViewInventory.addButton( NSMakeRect(measureRoundButtonsSide + measureRoundButtons * 3, measureRoundButtonsBottom, measureRoundButtons*2, measureRoundButtons*2), "toolbar/settings",
        function(sender){
            ToolbarInventory.updateContext();
            runSettings()
    })
    return [closeButton, settingsButton]
}
