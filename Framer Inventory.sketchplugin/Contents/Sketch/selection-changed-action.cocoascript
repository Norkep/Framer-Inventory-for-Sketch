@import 'actions/action-inventory.cocoascript'
@import 'actions/view-inventory.cocoascript'
@import 'lib.js'


var onSelectionChanged = function(context) {

    // coscript.setShouldKeepAround(true);
    // coscript.scheduleWithInterval_jsFunction(0.2,function() {
    //     var selection = NSDocumentController.sharedDocumentController().currentDocument().selectedLayers();
    //     ToolbarInventory.updateSelectionLabelStringValue(selection.count() + "")
    //     coscript.setShouldKeepAround(false); // Tearing down the session.
    // }


    coscript.setShouldKeepAround(true); // Setting session as a long running.

    // First argument is a delay in seconds.
    coscript.scheduleWithInterval_jsFunction(0.4,function() {
        var selection = NSDocumentController.sharedDocumentController().currentDocument().selectedLayers();


        ToolbarInventory.updateSelectionLabelStringValue(analyseActionType(selection) + "")

        // if (testObject != nil) {
        //     // var selection = NSDocumentController.sharedDocumentController().currentDocument().selectedLayers();
        //     // var selection = context.actionContext.newSelection
        //     // log(selection)
        //
        //     var selection = NSDocumentController.sharedDocumentController().currentDocument().selectedLayers();
        //     // log(selectionCorrect)
        //
        //     if (selection.count() > 0) {
        //         var currentName = "Artboards: "
        //
        //         var counterA = 0
        //         var counterL = 0
        //
        //         for (var i = 0; i < selection.count(); i++) {
        //               if (TypeInventory.isArtboardType([[selection objectAtIndex:i] className])) { counterA++ }
        //             // currentName += selection[i].name() + ", "
        //         }
        //         testObject.updateSelectionLabel(currentName + counterA)
        //     }
        //     else {
        //         testObject.updateSelectionLabel("Select Layers")
        //     }
        //
        // }

        coscript.setShouldKeepAround(false); // Tearing down the session.
    });






    //
    // var selection = NSDocumentController.sharedDocumentController().currentDocument().selectedLayers();
    // var tempCount = [selection count]
    // if (tempCount < 2) {
    //     log("Handler")
    //
    //     var threadDictionary = NSThread.mainThread().threadDictionary()
    //     log(threadDictionary)
    //     testObject = threadDictionary[testThreadIdentifier]
    //
    //     if (testObject == nil) {
    //       log("Object is NULL")
    //
    //       threadDictionary[testThreadIdentifier] = new TestObject("example");
    //       log(threadDictionary)
    //
    //       threadDictionary = NSThread.mainThread().threadDictionary()
    //
    //       log("Object should be changed. Let's check it")
    //       log(threadDictionary)
    //       var changedObject = threadDictionary[testThreadIdentifier]
    //       log(changedObject.panel)
    //     }
    //     else {
    //       log(threadDictionary[testThreadIdentifier])
    //       var changedObject = threadDictionary[testThreadIdentifier]
    //       log(changedObject.panel)
    //     }
    // }
    // else {
    //   log("gonna Clean. Base is")
    //
    //   var threadDictionary = NSThread.mainThread().threadDictionary()
    //   log(threadDictionary[testThreadIdentifier])
    //   threadDictionary.removeObjectForKey(testThreadIdentifier);
    //   log("works?")
    //   log(NSThread.mainThread().threadDictionary())
    //
    // }





    // log(NSThread.mainThread().threadDictionary())
		// log(UIBar)
		// if (UIBar == nil) {
		// 	log("NO")
    //
    //
    //
    //
    //   threadDictionary = NSThread.mainThread().threadDictionary()
    //   UIBar = threadDictionary[testThreadIdentifier]
    //
    //   log(UIBar)
		// }
};


// 0 – Select layers
// 1 – layer / all states
// 2 – selected states
// 3 – layers / all states for layers
// 4 – selected states for layers

var analyseActionType = function(selection) {
    var localLayers = NSMutableArray.new()
    var localArtboards = NSMutableArray.new()

    for (var i = 0; i < selection.count(); i++) {
        var currentLayerClassName = [[selection objectAtIndex:i] className]
        if (TypeInventory.isArtboardType(currentLayerClassName)) { localArtboards.addObject([selection objectAtIndex:i]) }
        else { localLayers.addObject([selection objectAtIndex:i]) }
    }

    if (localLayers.count() < 1) { return 0 }

    var isSameName = true
    if (localLayers.count() > 0) {
        var currentLayerName = [[localLayers firstObject] name]
        for (var i = 1; i < localLayers.count(); i++) {
            var currentLayer = [localLayers objectAtIndex:i]
            if (![currentLayerName isEqualToString:[currentLayer name]]) {
                isSameName = false
                break;
            }
        }
    }

    var additionalArtboards = NSMutableArray.new()
    for (var i = 0; i < localLayers.count(); i++) {
        var currentLayer = [localLayers objectAtIndex:i]
        var currentLayerArtboard = TypeInventory.findParentArtboard(currentLayer)
        if (TypeInventory.isArtboardType([currentLayerArtboard className])) { additionalArtboards.addObject(currentLayerArtboard) }
    }

    for (var i = 0; i < additionalArtboards.count(); i++) {
        var shouldAddCurrentArtboard = true
        var currentArtboard = [additionalArtboards objectAtIndex:i]

        for (var j = 0; j < localArtboards.count(); j++) {
            var comparableArtboard = [localArtboards objectAtIndex:j]
            if ([[comparableArtboard name] isEqualToString:[currentArtboard name]] &&
                [comparableArtboard hash] == [currentArtboard hash]) {
                    shouldAddCurrentArtboard = false
                    break;
                }
        }

        if (shouldAddCurrentArtboard) { localArtboards.addObject(currentArtboard) }
    }

    log("L: " + localLayers.count() + ", on A:" + localArtboards.count() + ". Same?" + isSameName)

    if (localArtboards.count() == 1) { return isSameName ? 1 : 3 }
    else if (localArtboards.count() > 1) { return isSameName ? 2 : 4 }
    else { return 0 }

    return 0
}
